{
  "pageProps": {
    "bounty": {
      "contentfulId": "4JBAbb2Y8DG80NglDzsGpk",
      "id": "firedancer",
      "slug": "firedancer",
      "project": "Firedancer",
      "maxBounty": 500000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/2O0QVg3wfx8rp3u3rzgqUg/4df69f867867b9c6b65a0cc30533e0b4/Firedancer_Transparent.png",
      "launchDate": "2024-09-18T13:00:00.000Z",
      "endDate": null,
      "updatedDate": "2024-10-02T16:36:05.073Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "blockchain_dlt",
          "level": "critical",
          "payout": "USD $100,000 - USD $500,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "high",
          "payout": "USD $50,000 - USD $100,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "medium",
          "payout": "USD $5,000 - USD $25,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "low",
          "payout": "USD $5,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "6bXntWlBIds3IkGJpnnOkI",
          "type": "blockchain_dlt",
          "url": "https://github.com/firedancer-io/firedancer/releases",
          "description": "Firedancer v0.1 Latest Mainnet (Pre-)Release",
          "isPrimacyOfImpact": null,
          "addedAt": "2024-09-18T13:00:00.000Z"
        }
      ],
      "impacts": [
        {
          "id": "6I3AoOdahGHwv9jcMYCx7R",
          "title": "Any sandbox escape",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "3r0c39GKKPiMnPpUktYAaS",
          "title": "Any bug leading to loss of funds or acceptance of forged / invalid signatures",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "77JY7JcO12MqLuSsPzXGkB",
          "title": "Key compromise/exfiltration exploit chain",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "3dVTsHJWT0ARSaNY0TrW9D",
          "title": "Network not being able to confirm new transactions (total network shutdown)*",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "5w6k9HX33cWlep34cAOlYQ",
          "title": "Unintended permanent chain split requiring hard fork (network partition requiring hard fork)*",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "3lAuhk4DB0tNL4DUzkrPjA",
          "title": "Direct loss of funds*",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "7tJOGlZBIrsUpfgMytlkLJ",
          "title": "Permanent freezing of funds (fix requires hard fork)*",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4iiMdo7pxb3YpVIv7f9vZt",
          "title": "Liveness issues that cause Firedancer v0.1 validators to crash or be unavailable*",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "71dZB7s7idOSrG87WBwodP",
          "title": "Unintended chain split (network partition)*",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "2geKtridX6iCq1Kp6anLGf",
          "title": "Temporary freezing of network transactions by delaying one block by 500% or more of the average block time of the preceding 24 hours beyond standard difficulty adjustments*",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "24MBE7cFf5PDjJ6ksMwvK9",
          "title": "Process to process RCE between sandboxed tiles",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "6gWR3Pe6Lj6c58B6ds4YWE",
          "title": "Any bug leading Firedancer v0.1 to produce an invalid block or skip its leader slot",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "4jtOP21GkRdULpzER3WBuV",
          "title": "Consensus issues causing Firedancer v0.1 validators to fork",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "4AZQFilYDyrwhUJQkfrYtd",
          "title": "Increasing network processing node resource consumption by at least 30% without brute force actions, compared to the preceding 24 hours*",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "3LYw1hsI4N8L9V1e7NraNs",
          "title": "Shutdown of greater than or equal to 30% of network processing nodes without brute force actions, but does not shut down the network*",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "7502rfTAIW58nv4yV3lwyI",
          "title": "A bug in the respective layer 0/1/2 network code that results in unintended smart contract behavior with no concrete funds at direct risk*",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "2DHZ32MC32jMlRgmHqVNgl",
          "title": "A bug in the respective layer 0/1/2 network code that results in unintended smart contract behavior with no concrete funds at direct risk*",
          "type": "blockchain_dlt",
          "severity": "low"
        },
        {
          "id": "2BcCw52R20x5GDrnYKdEH9",
          "title": "Modification of transaction fees outside of design parameters*",
          "type": "blockchain_dlt",
          "severity": "low"
        }
      ],
      "programOverview": "Firedancer is a new validator client for Solana.\n\n\n**Fast** - Designed from the ground up to be fast. The concurrency model draws from experience in the low latency trading space, and the code contains many novel high performance reimplementations of core Solana primitives.\n\n**Secure** - The validator's architecture allows it to run with a highly restrictive sandbox and almost no system calls.\n\n**Independent** - Firedancer is written from scratch. This brings client diversity to the Solana network and helps it stay resilient to supply chain attacks in building tooling or dependencies.\n\nFor more information about **Firedancer**, please visit [https://firedancer-io.github.io/firedancer/](https://firedancer-io.github.io/firedancer/).\n\nFiredancer provides rewards in __USDC__ on Solana, denominated in __USD__. For more details about the payment process, please view the __Rewards by Threat Level__ section further below.\n\n\n__KYC Requirement__\n\nFiredancer will be requesting KYC information in order to pay for successful bug submissions. The following information will be required:\n\n- Full name \n- Date of birth\n- Proof of address (either a redacted bank statement with address or a recent utility bill)\n- Copy of Passport or other Government issued ID\n- Eligibility Criteria \n\nSecurity researchers who wish to participate must adhere to the rules of engagement set forth in this program and cannot be:\n\n- On OFACs SDN list \n- Official contributor, both past or present\n- Employees and/or individuals closely associated with the project \n- Security auditors that directly or indirectly participated in the audit review\n\n__Responsible Publication__\n\nFiredancer adheres to category 3 - Approval Required. This Policy determines what information researchers are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our [Responsible Publication](https://immunefi.com/responsible-publication/) page.\n\nFiredancer adheres to the Primacy of Rules, meaning the whole bug bounty program is run strictly under the terms and conditions stated on this page.\n\n__Proof of Concept (PoC) Requirements__\n\nA PoC, demonstrating the bug's impact is required for this program and has to comply with the [Immunefi PoC Guidelines and Rules](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules).\n\n__Known Issue Guidelines__\n\nTo ensure fairness and transparency in the bug reporting process, Firedancer is prohibited from claiming that a bug report is a known or duplicate issue without providing clear and verifiable evidence. This measure is crucial to maintaining the integrity of the bug bounty program. \n\nFiredancer must present specific proof that an issue has been previously reported and acknowledged even if not disclosed publicly or privately as a known issue. Without such evidence, the bug report will be considered valid and eligible for the appropriate reward as per the bug bounty program terms. \n\nFor detailed information as what qualifies as acceptable proof of known issues, refer to the article on Immunefi Support: [Report Closed for Known Issues](https://immunefisupport.zendesk.com/hc/en-us/articles/10644746170897-Report-Closed-for-Known-Issues).\n\n__Public Disclosure of Known Issues__\n\nBug reports covering previously-discovered bugs (listed below) are not eligible for a reward within this program. This includes known issues that the project is aware of but has consciously decided not to “fix”, necessary code changes, or any implemented operational mitigating procedures that can lessen potential risk. \n\n- [https://immunefi.com/boost/firedancer-boost/information/](https://immunefi.com/boost/firedancer-boost/information/)\n- [https://github.com/firedancer-io/firedancer/issues](https://github.com/firedancer-io/firedancer/issues)\n- [https://github.com/firedancer-io/firedancer/pulls](https://github.com/firedancer-io/firedancer/pulls)\n- [https://github.com/firedancer-io/audits](https://github.com/firedancer-io/audits)\n\n\n\n__Previous Audits__\n\n[Firedancer]’s completed audit reports can be found at [https://github.com/firedancer-io/audits](https://github.com/firedancer-io/audits). Any unfixed vulnerabilities mentioned in these reports are not eligible for a reward.\n\n__Feasibility Limitations__\n\nThe project may be receiving reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. Conversely, there may also be mitigation measures that projects can take to prevent the impact of the bug, which are not feasible or would require unconventional action and hence, should not be used as reasons for downgrading a bug's severity.\n\nTherefore, Immunefi has developed a set of [feasibility limitation standards](https://immunefisupport.zendesk.com/hc/en-us/articles/16913132495377-Feasibility-Limitation-Standards) which by default state what security researchers, as well as projects, can or cannot cite when reviewing a bug report.\n\n__Immunefi Standard Badge__\n\nBy adhering to Immunefi’s best practice recommendations, Firedancer has satisfied the requirements for the [Immunefi Standard Badge](https://immunefisupport.zendesk.com/hc/en-us/articles/15006865432209)\n\n__Root Cause Duplicity Exemption__\n\nIf multiple distinct bugs are reported with the same root cause, they will be treated and grouped as one bug.",
      "prioritizedVulnerabilities": "Vulnerabilities are prioritized based on severity and impact.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.3](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-3/). \n\n\n__Reward Payment Terms__\n\nPayouts are handled by the Firedancer team directly and are denominated in USD. However, payments are made in USDC.",
      "outOfScopeAndRules": "__Additional Rules/Information:__\n\nFor exploits denoted as RCE, we expect an actual proof of RCE. Memory corruptions that are merely building blocks in a full RCE exploit chain will be rewarded less than full RCE exploits.\n\nPlease keep validator code patches in PoCs to a minimum, and thoroughly explain for each change why the bug can still be exploited on an unpatched validator, and under what conditions.\n\nThese impacts are out of scope for this bug bounty program:. \n\n__All Categories:__\n\n- Impacts requiring attacks that the reporter has already exploited themselves, leading to damage\n- Impacts caused by attacks requiring access to leaked keys/credentials\n- Impacts caused by attacks requiring access to privileged addresses (including, but not limited to: governance and strategist contracts) without additional modifications to the privileges attributed\n- Impacts relying on attacks involving the depegging of an external stablecoin where the attacker does not directly cause the depegging due to a bug in code\n- Impacts requiring phishing or other social engineering attacks against project's employees and/or customers.\n- Mentions of secrets, access tokens, API keys, private keys, etc. in Github will be considered out of scope without proof that they are in-use in production\n- Best practice recommendations\n- Feature requests\n- Impacts on test files and configuration files unless stated otherwise in the bug bounty program\n- Any affected code, from dependant Solana client implementations (eg. Agave) should be reported upstream.\n\n__Websites and Apps__\n\nAll websites and applications are out of scope.\n\n__Blockchain/DLT & Smart Contract Specific:__\n\n- Incorrect data supplied by third party oracles\n - Not to exclude oracle manipulation/flash loan attacks\n- Impacts requiring basic economic and governance attacks (e.g. 51% attack)\n- Lack of liquidity impacts\n- Impacts from Sybil attacks\n- Impacts involving centralization risks\n- Example code (https://github.com/jito-foundation/jito-programs/tree/master/example-programs)\n\n\n__Prohibited Activities:__\n\n- Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet\n- Any testing with pricing oracles or third-party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks that are executed against project assets\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "Firedancer codebase can be found at https://github.com/firedancer-io/firedancer/tree/main. Documentation and further resources can be found on:\n\n- Documentation: [https://firedancer-io.github.io/firedancer/](https://firedancer-io.github.io/firedancer/)\n- Technical education: Technical articles, ReadMe's, whitepaper, etc.\n- [https://github.com/firedancer-io/firedancer/blob/main/README.md](https://github.com/firedancer-io/firedancer/blob/main/README.md)\n- [https://github.com/firedancer-io/firedancer/blob/main/src/disco/README.md](https://github.com/firedancer-io/firedancer/blob/main/src/disco/README.md)\n- All header files contain sufficient documentation about each component's function\n- Developer codebase walkthrough\n- Non-technical education: introductory videos, protocol summaries, FAQs, etc\n- Solana Docs: https://solana.com/docs\n- How to build and run a Node [https://firedancer-io.github.io/firedancer/guide/getting-started.html](https://firedancer-io.github.io/firedancer/guide/getting-started.html)\n\nThe Firedancer validator builds as a single binary: `fdctl`.  All code and functionality linked and reachable by the main function of this binary is in scope, including from the primary `run` command, but also `configure`, `monitor`, and others. Bugs in linked but unreachable code (for example: cryptography implementations that are behind a development flag or library utility code that is never called) are in scope but are not exploitable and will be considered informational (aka insight reports).\n\n\nThe Firedancer repository contains code for two validators:\n\n- Firedancer v0.1, lovingly nicknamed “Frankendancer”, a split between Firedancer and the existing Agave validator written in Rust\n- A full C-only Firedancer, completely replacing the existing Agave validator.\n\n\nThe full Firedancer code is behind a development flag, and findings in code that is only reachable in full Firedancer will be considered informational (aka insight reports).\n\n\nThe Firedancer v0.1 validator interfaces with the existing Agave validator written in Rust via an FFI interface. This FFI interface and the modifications to Agave to support such FFI are in scope, but bugs in the Agave validator itself that would impact existing Solana validators should be reported to the Agave bug bounty and are not considered in scope for the contest.\n\n\nThe directory and file listing are provided to help navigate the codebase and determine what is in scope. The ground truth for scope and impact will follow the production binary.",
      "impactsBody": "The Firedancer v0.1 sandbox (and machine model) are explicitly in-scope. This means that a researcher could assume a tile’s already been breached, and any findings downstream of that “contrived” tile breach are valid. As an example: Assume the “Net” tile has been breached, such that the researcher has full RCE within the sandbox of the Net tile. If the attacker is able to cause malicious effects in any of the “downstream” tiles or on the system itself, these findings would also be in scope. However, this assumption does not hold for boundaries with the Agave validator, such as the link between `pack` and `bank` tiles.\n\nFiredancer builds as a single production binary, `fdctl`. Code linked into and reachable from this binary in the v0.1 Frankendancer build and branch is in scope, including the primary `fdctl`  run command. Code from the consensus, runtime, and other components of the full future Firedancer validator are not in scope. The FFI interface between Frankendancer and Agave is in scope, but bugs in Agave code that exist in the standalone Anza Agave validator are not in scope, and should be reported to Anza. Protocol bugs or design flaws in Solana are not in scope, and are reportable to Anza.\nThe sandbox and security model are in scope. You may assume an existing RCE breach and findings downstream of that, for example a sandbox escape, or gaining RCE in the sandbox of a different tile. Tiles in the Agave address space (bank, poh, store) are not considered sandboxed, and for example going from a pack RCE to bank RCE is not a sandbox escape.\nThe primary concern of the validator is defending against untrusted and malicious behavior from the network, and containing damage in the case of RCE. Issues local to the validator that cannot be exploited remotely, for example, command line argument or environment variable handling issues will be out of scope or informational.\nFor cluster impacts, a theoretical Firedancer-only chain is in scope. For example, a chain halt would not be possible currently on mainnet with a Firedancer exploit, since it would only halt Firedancer nodes, which the cluster can survive without. But you may assume 100% Firedancer nodes and demonstrate a chain split.\n\n**Special Note:** Severities noted by the **“*”** are those that we don’t believe are currently realizable risks with the amount of stake applied to Firedancer when authoring these terms. \n\nHowever, We believe these risks could be realized with more stake applied to Firedancer.  If you find something that realizes these risks, you are encouraged to submit it, and they will be rewarded according to their impact.",
      "immunefiStandard": true,
      "tags": {
        "general": [
          "Immunefi Standard",
          "KYC Required",
          "PoC Required"
        ],
        "productType": [
          "Validator"
        ],
        "projectType": [
          "Infrastructure"
        ],
        "ecosystem": [
          "Solana"
        ],
        "programType": [
          "Blockchain/DLT"
        ],
        "language": [
          "Rust"
        ],
        "featured": [
          "Launched Recently"
        ]
      },
      "legacy": {
        "technologies": [
          "Blockchain/DLT"
        ],
        "blockchain_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000 - USD $500,000"
          },
          {
            "level": "High",
            "payout": "USD $50,000 - USD $100,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000 - USD $25,000"
          },
          {
            "level": "Low",
            "payout": "USD $5,000"
          }
        ],
        "smartcontract_rewards": [],
        "web_rewards": []
      },
      "websiteUrl": null,
      "description": "Firedancer is a new validator client for Solana.",
      "githubUrl": null,
      "feasibilityLimitations": "The project may be receiving reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. Conversely, there may also be mitigation measures that projects can take to prevent the impact of the bug, which are not feasible or would require unconventional action and hence, should not be used as reasons for downgrading a bug's severity.\nTherefore, Immunefi has developed a set of feasibility limitation standards which by default states what security researchers, as well as projects, can or cannot cite when reviewing a bug report.\n- [Chain Rollbacks](https://immunefisupport.zendesk.com/hc/en-us/articles/16913153448721-Chain-Rollbacks)\n- [Pre-Impact Bug Monitoring](https://immunefisupport.zendesk.com/hc/en-us/articles/19430444320401-Pre-Impact-Bug-Monitoring)\n- [Attack Investment Amount](https://immunefisupport.zendesk.com/hc/en-us/articles/17243068885265-Attack-Investment-Amount)\n- [Attacks With A Financial Risk To The Attacker](https://immunefisupport.zendesk.com/hc/en-us/articles/17454897136401-Attacks-With-A-Financial-Risk-To-The-Attacker)\n- [When Is An Impactful Attack Downgraded To Griefing?](https://immunefisupport.zendesk.com/hc/en-us/articles/17455102268305-When-Is-An-Impactful-Attack-Downgraded-To-Griefing)\n",
      "prohibitedActivites": "- Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet\n- Any testing with pricing oracles or third-party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks that are executed against project assets\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n- [Any other actions prohibited by the Immunefi Rules](https://immunefi.com/rules/)\n",
      "responsiblePublicationCategory": "category_3",
      "knownIssues": [],
      "knownIssueAssurance": false,
      "outOfScopeBlockchain": null,
      "outOfScopeGeneral": null,
      "outOfScopeSmartContract": null,
      "outOfScopeWebAndApplications": null,
      "defaultOutOfScopeBlockchain": null,
      "defaultOutOfScopeSmartContract": null,
      "defaultOutOfScopeGeneral": null,
      "defaultOutOfScopeWebAndApplications": null,
      "defaultProhibitedActivities": null,
      "defaultFeasibilityLimitations": null,
      "customOutOfScopeInformation": null,
      "customProhibitedActivities": [],
      "rewardsTokenNetwork": "Solana",
      "rewardsToken": "USDC",
      "eligibilityCriteria": [
        "no_ofac_sdn",
        "no_official_contributor",
        "no_employee",
        "no_auditor"
      ],
      "eligibilityCriteriaAdditionalInformation": null,
      "premiumTriaging": false
    },
    "project": {
      "premiumTriaging": false,
      "isSafeHarborActive": false,
      "performanceMetrics": {}
    },
    "metaData": {
      "title": "Firedancer Bug Bounties",
      "description": "Find bugs and vulnerabilities on Firedancer and get paid up to $500,000.",
      "url": "https://immunefi.com/bug-bounty/firedancer",
      "ogImg": "/api/bounty/og-image?project=Firedancer"
    },
    "layoutProps": {
      "headerMarginBottom": "mb-3 lg:mb-15",
      "footerMarginTop": "mt-0"
    }
  },
  "__N_SSG": true
}
