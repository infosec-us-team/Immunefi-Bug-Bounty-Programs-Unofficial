{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "cowprotocol",
      "slug": "cowprotocol",
      "project": "CoW Protocol",
      "maxBounty": 54000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/52KySvMaXM8rslI5JRh9mP/0f7b3bf9802fcab2b92d274e1e53327a/Gnosis__1_.jpeg",
      "launchDate": "2021-06-15T12:00-05:00",
      "updatedDate": "2023-01-25T16:12:24.985Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "Up to USD $54,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "Up to USD $10,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "Up to USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "7IDVgk3ey1KEfAzGbvEqhz",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/GPv2AllowListAuthentication.sol",
          "description": "GPv2AllowListAuthentication",
          "isPrimacyOfImpact": null
        },
        {
          "id": "C1sbsgXSSEakKevP2zp4p",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2EIP1967.sol",
          "description": "GPv2EIP1967",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6pFCPVxUXKTRcwKC0pXVNz",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/GPv2Settlement.sol",
          "description": "GPv2Settlement",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1dqxOYJ0E2mYeEi9i1KOdT",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/mixins/GPv2Signing.sol",
          "description": "GPv2Signing.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "eieGGfuIG4mo01lrbBy69",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/mixins/StorageAccessible.sol",
          "description": "StorageAccessible.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2P61aZoKBQLSljHvSaOpF9",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2Interaction.sol",
          "description": "GPv2Interaction.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6wXVh6YCK8iormAFIWvlf0",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2Order.sol",
          "description": "GPv2Order.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4LZPwYXeFUqBmb5I2IlGXd",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2Trade.sol",
          "description": "GPv2Trade.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6aFcLI516TUcWk3NcDWftl",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2Transfer.sol",
          "description": "GPv2Transfer.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "UWpnNoGWKzdGpPB0kNkuJ",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/GPv2SafeERC20.sol",
          "description": "GPv2SafeERC20.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "FFpDPF6pNigXS1aQwLZVT",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/interfaces/GPv2Authentication.sol",
          "description": "GPv2Authentication.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1ehUC75nOi26X0LLewTjyM",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/interfaces/GPv2EIP1271.sol",
          "description": "GPv2EIP1271.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5cLG8LL6drGflG6ZOf0h9V",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/GPv2VaultRelayer.sol",
          "description": "GPv2VaultRelayer.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "49XeDkiTg7p4gPiZdXOYRA",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/mixins/Initializable.sol",
          "description": "Initializable.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6xpqTZ1Ms8y5SNaLtjdtc9",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/mixins/ReentrancyGuard.sol",
          "description": "ReentrancyGuard.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5zLXpxZpaTTtkwl4ndMjzS",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/SafeCast.sol",
          "description": "SafeCast.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "7069ZHbdqxv89QwHGtOyLQ",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/libraries/SafeMath.sol",
          "description": "SafeMath.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4CzqqbTzHD96QWlVwWfUa1",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/interfaces/IERC20.sol",
          "description": "IERC20.sol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "42VjcyHurEdBA0pYWhQ5z5",
          "type": "smart_contract",
          "url": "https://github.com/gnosis/gp-v2-contracts/blob/1bfee2d8d5f4b80e5599aca6984391d708d2b151/src/contracts/interfaces/IVault.sol",
          "description": "IVault.sol",
          "isPrimacyOfImpact": null
        }
      ],
      "impacts": [
        {
          "id": "72CxOR04Wir0UDFuw5OXwu",
          "title": "Changing the owner address of the authentication contract as well as adding a solver without authorization",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7boUvgyM46EpGxSArHrejA",
          "title": "Forgery of a user’s signature that would allow them to execute a funded trade without using the user’s private key",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "37iGDJEPRzixOvb6KoGvtw",
          "title": "Execute arbitrary settlements without being a solver",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "xEFtE66sNmVBBkRJ6xOTi",
          "title": "Executing a user’s trade that is expired or at a price worse than the limit price (also as a solver)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7yksksPpj7OnffubObO7m9",
          "title": "Transferring in tokens more than once for the same fill-or-kill order in the same settlement (also as a solver)",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "7k2gMt0UZujWf46zHD3ZN2",
          "title": "Access to user funds outside of a trade.",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3oHFXjMpeArU0Nz9wAahce",
          "title": "Access to user funds outside of a trade",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "RLuFesfg0re4E543w6tbU",
          "title": "Changing the order of a legitimate interaction, as well as skipping one, in a settlement",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "5gK47m0YCiHN3GdSIxrAGj",
          "title": "Removing a solver without authorization (also as a solver)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1zVW5euwoDOEG7TKJWbr8W",
          "title": "Making the contract unable to be operated by any solver, e.g., through self-destruction (also as a solver)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6uXxdA6FcAfCrDtu9YnWu8",
          "title": "Making the contract unable to be operated by any solver, e.g., through self-destruction (also as a solver)",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "U9TYPQaRimsgqn0U9pEPu",
          "title": "Freeing storage without being a solver",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "7lCeBsNs0OWrYFBuk0EXw3",
          "title": "Invalidate an order without the permission of the user who created it",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "5ymSm9mhvcUjPKPvolmNdA",
          "title": "Invalidate an order without the permission of the user who created it",
          "type": "smart_contract",
          "severity": "medium"
        }
      ],
      "programOverview": "Gnosis builds new market mechanisms for decentralized finance. Their three interoperable product lines allow you to securely create, trade, and hold digital assets on Ethereum.\n\nGnosis is running a bug bounty program focused on Gnosis Protocol v2, a fully permissionless protocol that leverages batch auctions to provide MEV protection, plus integrates with on-chain liquidity sources to offer traders the best prices.\n\nFor some background information, consider reading [this high-level summary](https://forum.gnosis.io/t/should-gnosis-build-gnosis-protocol-v2/741), which describes the motivation behind building Gnosis Protocol v2, as well as the reasons behind the architectural design choices described in [this announcement](https://blog.gnosis.pm/introducing-gnosis-protocol-v2-and-balancer-gnosis-protocol-f693b2938ae4).  \n\nThe bug bounty program is focused around its smart contracts and is mostly concerned with the loss of user funds.",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the following types:\n\n  - Re-entrancy\n  - Logic errors\n    - including user authentication errors\n  - Solidity/EVM details not considered\n    - including integer over-/under-flow\n    - including unhandled exceptions\n  - Misuse/wrong trust model for dependencies\n    - including composability vulnerabilities\n  - Oracle failure/manipulation\n  - Novel governance attacks\n  - Economic/financial attacks\n    - including flash loan attacks\n  - Congestion and scalability\n    - including block stuffing\n    - including susceptibility to frontrunning\n  - Consensus failures\n  - Cryptography problems\n    - Signature malleability\n    - Susceptibility to replay attacks\n    - Weak randomness\n    - Weak encryption\n  - Susceptibility to block timestamp manipulation\n  - Missing access controls / unprotected internal or debugging interfaces\n\nExamples of desired vulnerabilities/exploits\n\n  - Take funds from users’ allowances outside of a trade.\n  - Steal funds from the settlement contract as an external user (but not as the owner or a solver).\n  - Add or remove solvers without being the owner.\n  - Execute trades that have not been authorized by a user (e.g., a forged signature).\n  - Execute trades with different parameters from what the user signed (e.g., as sell order instead of as buy order).\n  - Execute expired trades.\n  - Replay already executed fill-or-kill orders.\n  - Execute more, in total, than the maximum amount for a partially fillable order.\n  - Execute a settlement so that the limit price of an order is not respected.\n  - Execute an interaction from the settlement contract to the vault relayer.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nThe Gnosis Protocol v2 bounty program considers a number of variables in determining rewards. Determinations of eligibility, score, and all terms related to an award are at the sole and final discretion of the Gnosis Protocol v2 bug bounty panel. \n\nThe Gnosis core development team, employees, and all other people paid by Gnosis, directly or indirectly (including the external auditors), are not eligible for rewards.\n\nIn order to be eligible for a reward, bug reports must include an explanation of how the bug can be reproduced, a failing test case, a valid scenario in which the bug can be exploited. Critical vulnerabilities with all of these have a maximum reward of __USD 50 000__. If a fix that makes the test case pass is provided, an additional __USD 4 000__ is provided for critical vulnerabilities, for a maximum reward of __USD 54 000__.\n\nIn addition to the Immunefi Severity Classification System, the following information is provided for each severity level. In case of discrepancies between this information and the Immunefi Severity Classification System, this information will prevail.\n\n__Critical:__\n\n  - Changing the owner address of the authentication contract as well as adding a solver without authorization.\n  - Forgery of a user’s signature that would allow them to execute a funded trade without using the user’s private key.\n  - Execute arbitrary settlements without being a solver.\n  - Executing a user’s trade that is expired or at a price worse than the limit price (also as a solver).\n  - Transferring in tokens more than once for the same fill-or-kill order in the same settlement (also as a solver).\n  - Access to user funds outside of a trade.\n\n__High:__\n\n  - Changing the order of a legitimate interaction, as well as skipping one, in a settlement.\n  - Removing a solver without authorization (also as a solver).\n  - Making the contract unable to be operated by any solver, e.g., through self-destruction (also as a solver).\n\n__Medium:__\n\n  - Freeing storage without being a solver.\n  - Invalidate an order without the permission of the user who created it.\n\nPayouts are handled by the __Gnosis Protocol v2 bug bounty panel__ directly and are denominated in USD. However, payouts are done in __ETH__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Running out of gas\n\nThe following activities are prohibited by bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty\n",
      "assetsBodyV2": "For the Initializable, ReentrancyGuard, SafeCast, SafeMath, IERC20, and IVault smart contracts, this bug bounty program only accepts bug reports for the changes that were performed compared to the original, as well as any improper use of them that leads to actual issues in the contracts previously mentioned to be in scope. Any bug that is reproducible in the original vendored contract is out of scope.\n\nAny vulnerabilities mentioned in this [audit report](https://github.com/gnosis/gp-v2-contracts/blob/main/audits/GnosisProtocolV2May2021.pdf) are considered as out-of-scope.\n\nThe following are also considered as out-of-scope:\n\n  - Migration methods.\n  - Services that build and submit the settlement transaction (e.g., denial of service, exploiting settlement transactions to extract value via sandwich attacks).\n  - Gas efficiency improvements.\n  - Any issues relating to networks other than the Ethereum Mainnet.\n  - Steal funds from the settlement contract as a solver.\n  - Price manipulation from the solver, for example: choosing the orders and the prices to settle that would lead to the solver getting a better-than-market price.\n  - Price manipulation from the solver, for example: reusing the same token twice in a settlement to give different prices to different orders.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Wallet"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "Up to USD $54,000"
          },
          {
            "level": "High",
            "payout": "Up to USD $10,000"
          },
          {
            "level": "Medium",
            "payout": "Up to USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "project": null
  },
  "__N_SSG": true
}
