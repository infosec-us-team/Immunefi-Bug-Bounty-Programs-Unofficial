{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "dslaprotocol",
      "slug": "dslaprotocol",
      "project": "DSLA Protocol",
      "maxBounty": 100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/lfL45GN2FIKTooz47Q4w0/d5dfac97b4b44e1b21dcd545ad707712/DSLA-logo.jpg",
      "launchDate": "2021-03-25T00:00-07:00",
      "updatedDate": "2023-03-08T18:57:56.502Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $100,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $40,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "bMb9nRxuJuNvOYShFrM95",
          "type": "smart_contract",
          "url": "https://kovan.etherscan.io/address/0x688b443A489735D1B2a6D36cb7c1aa7668275542#code",
          "description": "Messenger.sol"
        },
        {
          "id": "1xxHZyu84cVht1uefxLQX4",
          "type": "smart_contract",
          "url": "https://kovan.etherscan.io/address/0x6C4F8C1DD7BDe4b0F7A626d14D0A24a198ae5973#code",
          "description": "SLA/SLA.sol"
        },
        {
          "id": "7uZW7RUnmkMIJdj9RMqHXq",
          "type": "smart_contract",
          "url": "https://kovan.etherscan.io/address/0xaA55EE80d95FC17f3d97611816101c4F29EB8Afc#code",
          "description": "SLA/Staking.sol"
        },
        {
          "id": "36RhgRI7C3Q0HcDUc5Rkay",
          "type": "smart_contract",
          "url": "https://etherscan.io/address/0xB63a13825e129fBa2f2205847158461bec5f265A#code",
          "description": "SLARegistry.sol"
        },
        {
          "id": "3cWvbAczqZmW81nxm3hDY6",
          "type": "websites_and_applications",
          "url": "https://dsla.network",
          "description": null
        },
        {
          "id": "4KynMkR59gosFyZiLhBhRS",
          "type": "websites_and_applications",
          "url": "https://stacktical.com",
          "description": null
        }
      ],
      "impacts": [
        {
          "id": "787elXlYCjjXgvyjYf34Co",
          "title": "Critical Smart Contract Impact",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "71I1n1fxNjTy2Pzox7wJr5",
          "title": "High Smart Contract Impact",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7lGIrYAj3oS5zkm17Wvos1",
          "title": "Medium Smart Contract Impact",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "6Umu8G28XLhppsJDhoW9Jl",
          "title": "Low Smart Contract Impact",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "The DSLA Protocol adds native risk management and parametric insurance\ncapabilities to applications and networks. It does it by introducing a risk\nmanagement framework that enables developers and infrastructure operators to\nreduce their users exposure to service delays, interruptions and financial\nlosses, using self-executing service level agreements, bonus-malus insurance\npolicies, and crowdfunded liquidity pools.\n\nThe DSLA token is at the heart of DSLA Protocol's economics. Its main utility\nis to unlock access to exclusive protocol feature tiers, and fuel the execution\nof decentralized service level agreements over time. The total supply of DSLA\ntokens decreases through a native burn mechanism, as the protocol is being used\nto execute agreements, process claims and more.\n\nThe bug bounty program is focused around its smart contracts and is mostly\nconcerned with the loss of user funds. Web and app bug reports are also\naccepted within this program, but do not have a reward.",
      "prioritizedVulnerabilities": "We are especially interested in receiving and rewarding vulnerabilities of the\nfollowing types:\n\n**Smart Contracts/Blockchain:**\n\n- Re-entrancy\n- Logic errors\n  - including user authentication errors\n- Solidity/EVM details not considered\n  - including integer over-/under-flow\n  - including unhandled exceptions\n- Trusting trust/dependency vulnerabilities\n  - including composability vulnerabilities\n- Oracle failure/manipulation\n- Novel governance attacks\n- Economic/financial attacks\n  - including flash loan attacks\n- Congestion and scalability\n  - including running out of gas\n  - including block stuffing\n  - including susceptibility to frontrunning\n- Consensus failures\n- Cryptography problems\n  - Signature malleability\n  - Susceptibility to replay attacks\n  - Weak randomness\n  - Weak encryption\n- Susceptibility to block timestamp manipulation\n- Missing access controls / unprotected internal or debugging interfaces\n\n**Accepted Web/App Vulnerabilities:**\n\nWe accept the following website/app vulnerabilities, though there is no reward\nfor them:\n\n- Remote Code Execution\n- Trusting trust/dependency vulnerabilities\n- Vertical Privilege Escalation\n- XML External Entities Injection\n- SQL Injection\n- LFI/RFI\n- Horizontal Privilege Escalation\n- Stored XSS\n- Reflective XSS with impact\n- CSRF with impact\n- Internal SSRF\n- Session fixation\n- Insecure Deserialization\n- Direct object reference\n- DOM XSS\n- SSL misconfigurations\n- SSL/TLS issues (weak crypto, improper setup)\n- URL redirect\n- Clickjacking\n- Misleading Unicode text (e.g. using right to left override characters)",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on\nthe <Link href=\"/severity-system/\">Immunefi Vulnerability Severity Classification System</Link>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\n\nPayouts are handled by the **DSLA** team directly and are denominated in\n**USD**. However, payouts are done in **DSLA** for High and Critical bug\nreports and may be done in **USDC** for Medium and Low bug reports.",
      "outOfScopeAndRules": "**The following vulnerabilities are excluded from the rewards for this bug\nbounty program:**\n\n- Attacks that the reporter has already exploited themselves, leading to damage\n- Attacks requiring access to leaked keys/credentials\n- Attacks requiring access to privileged addresses (governance, strategist)\n- Incorrect data supplied by third party oracles\n  - Not to exclude oracle manipulation/flash loan attacks\n- Basic economic governance attacks (e.g. 51% attack)\n- Lack of liquidity\n- Best practice critiques\n- Sybil attacks\n\n**The following vulnerabilities are not sought after for website bug reports:**\n\n- Theoretical vulnerabilities without any proof or demonstration\n- Content spoofing / Text injection issues\n- Self-XSS\n- Captcha bypass using OCR\n- CSRF with no security impact (logout CSRF, change language, etc.)\n- Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security\n  flags (such as “httponly”)\n- Server-side information disclosure such as IPs, server names, and most stack\n  traces\n- Vulnerabilities used to enumerate or confirm the existence of users or\n  tenants\n- Vulnerabilities requiring unlikely user actions\n- URL Redirects (unless combined with another vulnerability to produce a more\n  severe vulnerability)\n- Lack of SSL/TLS best practices\n- DDoS vulnerabilities\n- Attacks requiring privileged access from within the organization\n\n**The following activities are prohibited by bug bounty program:**\n\n- Any testing with mainnet or public testnet contracts; all testing should be\n  done on private testnets\n- Any testing with pricing oracles or third party smart contracts\n- Attempting phishing or other social engineering attacks against our employees\n  and/or customers\n- Any testing with third party systems and applications (e.g. browser\n  extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": "Web and App bug reports are accepted within the scope of this bug bounty\nprogram, but have no payout.\n\nFor additional reference, here are the addresses of the other contracts of DSLA in the Kovan testnet. However, only those listed in the actual table  are within the scope of this program.\n\nDSLAToken:                [0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe](https://etherscan.io/address/0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe#code)\nUSDCToken:                [0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48](https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48#code)\nSLORegistry:              [0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487](https://etherscan.io/address/0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487#code)\nMessengerRegistry:        [0x766C0b52fADC43Bc3EEAe8BC64536404981951bE](https://etherscan.io/address/0x766C0b52fADC43Bc3EEAe8BC64536404981951bE#code)\nPeriodRegistry:           [0x5Da279bE9D6CeB11e7D7117915075066909357bc](https://etherscan.io/address/0x5Da279bE9D6CeB11e7D7117915075066909357bc#code)\nStakeRegistry:            [0x4b48AdDd838A11061cE285106f4a30cc5636735C](https://etherscan.io/address/0x4b48AdDd838A11061cE285106f4a30cc5636735C#code)\nSEMessenger:              [0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C](https://etherscan.io/address/0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C#code)\nNetworkAnalytics:         [0xC33492F8D76918A9527165A9fD71089980656357](https://etherscan.io/address/0xC33492F8D76918A9527165A9fD71089980656357#code)\n\nDetails:                  [0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513](https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code)\nAdminWallet:              [0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1](https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code)\nDAIToken:                 [0x6B175474E89094C44Da98b954EedeAC495271d0F](https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F#code)\n",
      "impactsBody": null,
      "immunefiStandard": null,
      "tags": {
        "productType": [
          "Insurance"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract",
          "Websites and Applications"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000"
          },
          {
            "level": "High",
            "payout": "USD $40,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The DSLA Protocol adds native risk management and parametric insurance\\ncapabilities to applications and networks. It does it by introducing a risk\\nmanagement framework that enables developers and infrastructure operators to\\nreduce their users exposure to service delays, interruptions and financial\\nlosses, using self-executing service level agreements, bonus-malus insurance\\npolicies, and crowdfunded liquidity pools.\"), mdx(\"p\", null, \"The DSLA token is at the heart of DSLA Protocol's economics. Its main utility\\nis to unlock access to exclusive protocol feature tiers, and fuel the execution\\nof decentralized service level agreements over time. The total supply of DSLA\\ntokens decreases through a native burn mechanism, as the protocol is being used\\nto execute agreements, process claims and more.\"), mdx(\"p\", null, \"The bug bounty program is focused around its smart contracts and is mostly\\nconcerned with the loss of user funds. Web and app bug reports are also\\naccepted within this program, but do not have a reward.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The DSLA Protocol adds native risk management and parametric insurance\ncapabilities to applications and networks. It does it by introducing a risk\nmanagement framework that enables developers and infrastructure operators to\nreduce their users exposure to service delays, interruptions and financial\nlosses, using self-executing service level agreements, bonus-malus insurance\npolicies, and crowdfunded liquidity pools.</p><p>The DSLA token is at the heart of DSLA Protocol&#x27;s economics. Its main utility\nis to unlock access to exclusive protocol feature tiers, and fuel the execution\nof decentralized service level agreements over time. The total supply of DSLA\ntokens decreases through a native burn mechanism, as the protocol is being used\nto execute agreements, process claims and more.</p><p>The bug bounty program is focused around its smart contracts and is mostly\nconcerned with the loss of user funds. Web and app bug reports are also\naccepted within this program, but do not have a reward.</p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We are especially interested in receiving and rewarding vulnerabilities of the\\nfollowing types:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts/Blockchain:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Re-entrancy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including user authentication errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solidity/EVM details not considered\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including integer over-/under-flow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including unhandled exceptions\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including composability vulnerabilities\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oracle failure/manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Novel governance attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Economic/financial attacks\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Congestion and scalability\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including running out of gas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including block stuffing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"including susceptibility to frontrunning\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consensus failures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cryptography problems\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Signature malleability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to replay attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak randomness\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weak encryption\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Susceptibility to block timestamp manipulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing access controls / unprotected internal or debugging interfaces\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Accepted Web/App Vulnerabilities:\")), mdx(\"p\", null, \"We accept the following website/app vulnerabilities, though there is no reward\\nfor them:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remote Code Execution\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trusting trust/dependency vulnerabilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vertical Privilege Escalation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"XML External Entities Injection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQL Injection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LFI/RFI\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Horizontal Privilege Escalation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stored XSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reflective XSS with impact\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSRF with impact\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Internal SSRF\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Session fixation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Insecure Deserialization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Direct object reference\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DOM XSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SSL misconfigurations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SSL/TLS issues (weak crypto, improper setup)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"URL redirect\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clickjacking\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Misleading Unicode text (e.g. using right to left override characters)\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>We are especially interested in receiving and rewarding vulnerabilities of the\nfollowing types:</p><p><strong>Smart Contracts/Blockchain:</strong></p><ul><li>Re-entrancy</li><li>Logic errors<ul><li>including user authentication errors</li></ul></li><li>Solidity/EVM details not considered<ul><li>including integer over-/under-flow</li><li>including unhandled exceptions</li></ul></li><li>Trusting trust/dependency vulnerabilities<ul><li>including composability vulnerabilities</li></ul></li><li>Oracle failure/manipulation</li><li>Novel governance attacks</li><li>Economic/financial attacks<ul><li>including flash loan attacks</li></ul></li><li>Congestion and scalability<ul><li>including running out of gas</li><li>including block stuffing</li><li>including susceptibility to frontrunning</li></ul></li><li>Consensus failures</li><li>Cryptography problems<ul><li>Signature malleability</li><li>Susceptibility to replay attacks</li><li>Weak randomness</li><li>Weak encryption</li></ul></li><li>Susceptibility to block timestamp manipulation</li><li>Missing access controls / unprotected internal or debugging interfaces</li></ul><p><strong>Accepted Web/App Vulnerabilities:</strong></p><p>We accept the following website/app vulnerabilities, though there is no reward\nfor them:</p><ul><li>Remote Code Execution</li><li>Trusting trust/dependency vulnerabilities</li><li>Vertical Privilege Escalation</li><li>XML External Entities Injection</li><li>SQL Injection</li><li>LFI/RFI</li><li>Horizontal Privilege Escalation</li><li>Stored XSS</li><li>Reflective XSS with impact</li><li>CSRF with impact</li><li>Internal SSRF</li><li>Session fixation</li><li>Insecure Deserialization</li><li>Direct object reference</li><li>DOM XSS</li><li>SSL misconfigurations</li><li>SSL/TLS issues (weak crypto, improper setup)</li><li>URL redirect</li><li>Clickjacking</li><li>Misleading Unicode text (e.g. using right to left override characters)</li></ul>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on\\nthe \", mdx(Link, {\n    href: \"/severity-system/\",\n    mdxType: \"Link\"\n  }, \"Immunefi Vulnerability Severity Classification System\"), \". This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.\"), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DSLA\"), \" team directly and are denominated in\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD\"), \". However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DSLA\"), \" for High and Critical bug\\nreports and may be done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \" for Medium and Low bug reports.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on\nthe <a href=\"/severity-system/\" target=\"_blank\" rel=\"noopener noreferrer\">Immunefi Vulnerability Severity Classification System</a>. This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from consequence of exploitation to privilege required to likelihood of a successful exploit.</p><p>Payouts are handled by the <strong>DSLA</strong> team directly and are denominated in\n<strong>USD</strong>. However, payouts are done in <strong>DSLA</strong> for High and Critical bug\nreports and may be done in <strong>USDC</strong> for Medium and Low bug reports.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The following vulnerabilities are excluded from the rewards for this bug\\nbounty program:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The following vulnerabilities are not sought after for website bug reports:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theoretical vulnerabilities without any proof or demonstration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content spoofing / Text injection issues\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Self-XSS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Captcha bypass using OCR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSRF with no security impact (logout CSRF, change language, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security\\nflags (such as \\u201Chttponly\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server-side information disclosure such as IPs, server names, and most stack\\ntraces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities used to enumerate or confirm the existence of users or\\ntenants\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vulnerabilities requiring unlikely user actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"URL Redirects (unless combined with another vulnerability to produce a more\\nsevere vulnerability)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of SSL/TLS best practices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DDoS vulnerabilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring privileged access from within the organization\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The following activities are prohibited by bug bounty program:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be\\ndone on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees\\nand/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser\\nextensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>The following vulnerabilities are excluded from the rewards for this bug\nbounty program:</strong></p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li></ul><p><strong>The following vulnerabilities are not sought after for website bug reports:</strong></p><ul><li>Theoretical vulnerabilities without any proof or demonstration</li><li>Content spoofing / Text injection issues</li><li>Self-XSS</li><li>Captcha bypass using OCR</li><li>CSRF with no security impact (logout CSRF, change language, etc.)</li><li>Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security\nflags (such as “httponly”)</li><li>Server-side information disclosure such as IPs, server names, and most stack\ntraces</li><li>Vulnerabilities used to enumerate or confirm the existence of users or\ntenants</li><li>Vulnerabilities requiring unlikely user actions</li><li>URL Redirects (unless combined with another vulnerability to produce a more\nsevere vulnerability)</li><li>Lack of SSL/TLS best practices</li><li>DDoS vulnerabilities</li><li>Attacks requiring privileged access from within the organization</li></ul><p><strong>The following activities are prohibited by bug bounty program:</strong></p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be\ndone on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees\nand/or customers</li><li>Any testing with third party systems and applications (e.g. browser\nextensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Web and App bug reports are accepted within the scope of this bug bounty\\nprogram, but have no payout.\"), mdx(\"p\", null, \"For additional reference, here are the addresses of the other contracts of DSLA in the Kovan testnet. However, only those listed in the actual table  are within the scope of this program.\"), mdx(\"p\", null, \"DSLAToken:                \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe#code\"\n  }, \"0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe\"), \"\\nUSDCToken:                \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48#code\"\n  }, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"), \"\\nSLORegistry:              \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487#code\"\n  }, \"0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487\"), \"\\nMessengerRegistry:        \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x766C0b52fADC43Bc3EEAe8BC64536404981951bE#code\"\n  }, \"0x766C0b52fADC43Bc3EEAe8BC64536404981951bE\"), \"\\nPeriodRegistry:           \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x5Da279bE9D6CeB11e7D7117915075066909357bc#code\"\n  }, \"0x5Da279bE9D6CeB11e7D7117915075066909357bc\"), \"\\nStakeRegistry:            \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x4b48AdDd838A11061cE285106f4a30cc5636735C#code\"\n  }, \"0x4b48AdDd838A11061cE285106f4a30cc5636735C\"), \"\\nSEMessenger:              \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C#code\"\n  }, \"0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C\"), \"\\nNetworkAnalytics:         \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0xC33492F8D76918A9527165A9fD71089980656357#code\"\n  }, \"0xC33492F8D76918A9527165A9fD71089980656357\")), mdx(\"p\", null, \"Details:                  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code\"\n  }, \"0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513\"), \"\\nAdminWallet:              \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code\"\n  }, \"0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1\"), \"\\nDAIToken:                 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F#code\"\n  }, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\")));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Web and App bug reports are accepted within the scope of this bug bounty\nprogram, but have no payout.</p><p>For additional reference, here are the addresses of the other contracts of DSLA in the Kovan testnet. However, only those listed in the actual table  are within the scope of this program.</p><p>DSLAToken:                <a href=\"https://etherscan.io/address/0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe#code\">0x3aFfCCa64c2A6f4e3B6Bd9c64CD2C969EFd1ECBe</a>\nUSDCToken:                <a href=\"https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48#code\">0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</a>\nSLORegistry:              <a href=\"https://etherscan.io/address/0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487#code\">0x1bE60A36Ba9De2eCeFe8be8d2720B67f932EC487</a>\nMessengerRegistry:        <a href=\"https://etherscan.io/address/0x766C0b52fADC43Bc3EEAe8BC64536404981951bE#code\">0x766C0b52fADC43Bc3EEAe8BC64536404981951bE</a>\nPeriodRegistry:           <a href=\"https://etherscan.io/address/0x5Da279bE9D6CeB11e7D7117915075066909357bc#code\">0x5Da279bE9D6CeB11e7D7117915075066909357bc</a>\nStakeRegistry:            <a href=\"https://etherscan.io/address/0x4b48AdDd838A11061cE285106f4a30cc5636735C#code\">0x4b48AdDd838A11061cE285106f4a30cc5636735C</a>\nSEMessenger:              <a href=\"https://etherscan.io/address/0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C#code\">0xFB29aFC3F4B78755f07faD5B86448595D2EEC86C</a>\nNetworkAnalytics:         <a href=\"https://etherscan.io/address/0xC33492F8D76918A9527165A9fD71089980656357#code\">0xC33492F8D76918A9527165A9fD71089980656357</a></p><p>Details:                  <a href=\"https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code\">0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513</a>\nAdminWallet:              <a href=\"https://etherscan.io/address/0x38b0cd8BB4C4608E32EE75b25A8846459cEAd513#code\">0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1</a>\nDAIToken:                 <a href=\"https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F#code\">0x6B175474E89094C44Da98b954EedeAC495271d0F</a></p>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
