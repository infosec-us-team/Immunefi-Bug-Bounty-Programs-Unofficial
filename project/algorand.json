{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "algorand",
      "slug": "algorand",
      "project": "Algorand Blockchain",
      "maxBounty": 2000000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/6zQzcbqvaJdbyrE6hEjyIQ/63ebce57d0ad6fff07bd9ff4a8e7485f/Algorand_logo.jpeg",
      "launchDate": "2022-11-10T12:00-06:00",
      "updatedDate": "2023-02-16T15:39:41.212Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "blockchain_dlt",
          "level": "critical",
          "payout": "USD $100,000 to USD $2,000,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "high",
          "payout": "USD $75,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "medium",
          "payout": "USD $10,000",
          "pocRequired": false
        },
        {
          "assetType": "blockchain_dlt",
          "level": "low",
          "payout": "USD $2,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "1uDmqx1rAqHjMZlOvkPZwv",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/agreement",
          "description": "Agreement",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4YOcvNNrMFZi4GV2THes0d",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/catchup",
          "description": "Catchup",
          "isPrimacyOfImpact": null
        },
        {
          "id": "3rSGi0heXkVNEcGW2zDNft",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/crypto",
          "description": "Crypto",
          "isPrimacyOfImpact": null
        },
        {
          "id": "3HAzUwfXeMeFTBSiQw37uo",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/daemon",
          "description": "Daemon",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1D06svCyFvT8SkudlyqfNp",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/data",
          "description": "Data",
          "isPrimacyOfImpact": null
        },
        {
          "id": "49FNm2p0IQkVSvLa1u5TYi",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/ledger",
          "description": "Ledger",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2j0LoPfXFI4KOYjnILpOpK",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/network",
          "description": "Network",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2qyXLIRXmpMAMlztBedjj5",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/node",
          "description": "Node",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5L8v0RcSWdS1aUIOW0g80j",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/protocol",
          "description": "Protocol",
          "isPrimacyOfImpact": null
        },
        {
          "id": "32Rd2AtqL4ojPllP4vG2kB",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/rpcs",
          "description": "rpcs",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6bPNyBlDBhOz0Z5h0UUeUN",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/stateproof",
          "description": "State Proof",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2ehYMWEpMkL8kMjbkF3ghL",
          "type": "blockchain_dlt",
          "url": "https://github.com/algorand/go-algorand/tree/master/util",
          "description": "Util",
          "isPrimacyOfImpact": null
        }
      ],
      "impacts": [
        {
          "id": "4m2KYCsKAUM6TqTubAuwlf",
          "title": "Any methods of double spending, stealing, or creating Algos caused by an issue in algod node software",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "6U9zDZjh7BgX3pK1rw1fXx",
          "title": "Consensus safety violations: fork (two different blocks for the same round which were certified by the consensus protocol), or creation of a certified block with invalid transactions",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "1MRhnnyd2XBQyREqBXjG9H",
          "title": "Any methods of Remote Code Execution (RCE) on a properly configured Algorand node solely communicating with properly configured MainNet relays (on their public relay port - excludes any attack using the REST API)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "2zVF2F1rmDy8o0KuYuOeRx",
          "title": "Tamper / manipulate blockchain history to add, invalidate, or change past transactions",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "2wFlIxMwtCS0p3xvnzP4hY",
          "title": "Halt consensus so it is unable to produce new blocks for over 24 hours",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "1RFoLSMylHTEvvRhVRcBw7",
          "title": "Attack leading to network partition of nodes: having some properly configured nodes with unrestricted and uncensored Internet access to not see new blocks for an extended period of time",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "37P6pbfyORghDiuGmfqaP9",
          "title": "Any methods of Remote Code Execution (RCE) on a properly configured Algorand node solely communicating via the REST API endpoint (for this type of attack, credentials of the REST API endpoint can be used)",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "2E8gZubH9sYNHqN5WvMmVW",
          "title": "Any attack remotely leaking secret participation keys of a properly configured participation node (without access to the node itself nor any of its credentials) or leaking enough information to be able to vote and propose block on behalf of the node",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "4kxV928dQPuQRYGJTuuucn",
          "title": "Remote crash",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "2Br3QZboXawygSthDM9iIT",
          "title": "Censor a specific valid transaction for >100 blocks without interrupting the rest of the network and with transaction fees set related to congestion. Economic (large stake / node access) and spam (filling blocks with transactions) attacks are out of scope",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "1s0IkF4SivOUZBWNmUzGpX",
          "title": "Any bug preventing a properly configured participation node which follows the Algorand Foundation’s node requirements (https://algorand.foundation/algorand-protocol/network) with >1% of online stake from proposing blocks for >24 hours",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "1fxcLsfca3v0CaPVN8UE43",
          "title": "Any panic of the AVM caused by an otherwise valid transaction",
          "type": "blockchain_dlt",
          "severity": "medium"
        },
        {
          "id": "j32iRodYHMQYkFfW0W41w",
          "title": "Any panic of the AVM caused by invalid transactions, unless such a panic is explicitly allowed per the code / documentation",
          "type": "blockchain_dlt",
          "severity": "low"
        },
        {
          "id": "1P6bxXzeNrkpWLiU3OLtgu",
          "title": "Any bug which allows an attacker to show corrupt information to a consumer of an API (does not need to necessarily corrupt any vital state)",
          "type": "blockchain_dlt",
          "severity": "low"
        }
      ],
      "programOverview": "Algorand is the world’s most powerful and sustainable blockchain.\nOur institutional grade blockchain infrastructure is the first and only to achieve decentralization, scalability, and security without compromises and while being environmentally sustainable.\n\nFor more information about the Algorand Blockchain, please visit [https://www.algorand.com/](https://www.algorand.com/).\nFor more information about the Algorand Foundation Bug Matching Bounty Program, please visit [https://immunefi.com/algorand-matching/](https://immunefi.com/algorand-matching/)",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the “Impacts in Scope” section below. This is a simplified 4-level scale focusing on the impact of the vulnerability reported. This program only covers the Algorand Blockchain itself - any third-party software or smart contracts built on the Algorand Blockchain are considered out of scope.\n\nAll Critical and High Blockchain/Digital Ledger Technology vulnerability reports require a Proof of Concept (‘PoC’) to be eligible for a reward.  Explanations and statements are not accepted as PoC and code is required.\n\nCritical Blockchain/DLT vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the final decision of Immunefi, after consulting with the Algorand Inc. and the Algorand Foundation teams. However, there is a minimum reward of __USD 100 000__. \nThe following vulnerabilities are not eligible for a reward:\n\n  - Any issue on the issue tracker: [https://github.com/algorand/go-algorand/issues](https://github.com/algorand/go-algorand/issues)\n  - Any issue found on open pull requests: [https://github.com/algorand/go-algorand/pulls](https://github.com/algorand/go-algorand/pulls) \n\nPlease refer to the documentations here on creating a dev environment so that PoCs can be created properly.\n\n  - [https://developer.algorand.org/docs/](https://developer.algorand.org/docs/)\n  - [https://developer.algorand.org/docs/run-a-node/setup/install/](https://developer.algorand.org/docs/run-a-node/setup/install/)\n\nKYC shall be done for bug bounty hunters submitting a vulnerability report and requesting a reward for Critical and High Blockchain/DLT vulnerabilities. The basic information needed is full name, residential address, and passport details (DOB, issuing country and passport number). Based on the basic information submitted, the Algorand Foundation team may request further information at its sole discretion for compliance with applicable laws.\n\nAdditionally, all levels of bug bounty hunters submitting a vulnerability report and requesting a reward need to submit certification that (i) they are not acting, directly or indirectly, for or on behalf of any person, group entity, or nation named by any Executive Order or the United States Treasury Department as a terrorist, “Specially Designated National and Blocked Person,” or other banned or blocked person, entity, nation, or transaction pursuant to any law, order, rule or regulation that is enforced or administered by the Office of Foreign Assets Control; and (ii) they are not engaging in, instigating or facilitating this transaction, directly or indirectly, on behalf of any such person, group, entity, or nation. They also need to submit an attestation that all information provided is true, correct, up-to-date and not misleading.\n\nThe collection of this information will be done by the Algorand Foundation team.\n\nBug bounty reward payouts are handled by the Algorand Foundation team directly and are denominated in __USDCa__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Blockchain__\n  - Best practice critiques\n  - Centralization risks\n  - Attacks requiring >20% of online stake held by accounts or nodes (those that hold more online stake than Algorand’s consensus assumptions) to exhibit “bad behavior” (e.g. expiring participation keys)\n  - 3rd party risks (e.g applications built on top of the Algorand blockchain, light clients, bridges, liquidity imported to / exported from Algorand, use of 3rd party provider, etc.)\n  - Any bugs that cannot be exploited on MainNet, TestNet, or BetaNet (e.g. limited to other publicly provided or private networks)\n  - Attacks requiring quantum computers or impractical memory/computation capabilities\n  - Standard asset freeze / clawback actions from privileged addresses (e.g. manager / reserve / freeze / clawback address actions)\n  - Any minor violation of semantics of transfer/creation/… of ASAs or of smart contracts that does not have any impact on significant dApps (e.g., because the semantics are just unclear or never actually used in real use cases)\n  - Attacks requiring physical access to the nodes\n  - Attacks requiring a network partition of the Internet itself or significant control over the Internet infrastructure (BGP attack, control of major Internet routers/backbone, control of a cloud provider, generation of TLS certificates for malicious websites, etc.) \n  - Attacks related to misconfigured nodes or nodes not using the proper configuration (algod running as a privileged user, disabling of DNSSec, use of a too small/too slow disk, etc.)\n  - Attacks related to nodes not running the latest stable version of algod\n  - Attacks using maliciously generated fast catchup hash values\n  - Supply-chain attacks\n  - Side-channel attacks\n  - Denial of Service (DoS) or crash testing against any node you don’t own (e.g. public relay nodes)\n  - Bandwidth flooding DDoS attacks (saturating the network)\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks that rely on social engineering\n  - Attacks requiring access to leaked keys / credentials\n  - Theoretical attacks that cannot be applied in practice\n  - Attacks against white papers\n  - Any bug that has been previously disclosed / submitted\n  - Any bug that has already been exploited\n  - Bugs from misconfigured / inappropriately secured smart contracts\n  - Any third-party software or smart contracts built on Algorand \n\nThe following activities are prohibited by (and shall be deemed as a breach of) this bug bounty program:\n\n  - Bug testing on any public network; all testing should be done on private testnets\n  - Any denial of service attacks or crash testing against any node you don’t own (e.g. public relay nodes)\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty\n  - Algorand Inc. considers Social Engineering attacks against Algorand Inc. employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Inc. employees will be banned from the Algorand Blockchain Bug Bounty program. Algorand Inc. defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.\n  - Algorand Foundation considers Social Engineering attacks against Algorand Foundation employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Foundation employees will be banned from the Algorand Blockchain Bug Bounty program. The Algorand Foundation defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.",
      "assetsBodyV2": "All blockchain code of Algorand can be found at [https://github.com/algorand/go-algorand](https://github.com/algorand/go-algorand). However, only those in the Assets in Scope table’s located in the main branch are considered as in-scope of the bug bounty program.\n\nNote: any file which includes _test and/or mocks is out of scope.\nIn particular, the following assets are out of scope\n  1. kmd\n  2. Ledger app\n  3. Indexer\n  4. SDKs\n  5. Any third-party software or smart contracts\n  6. Websites (algorand.com, algorand.foundation, etc.)\n\nIf an impact can be caused to any other asset relating to the Algorand Blockchain that isn’t on this table but for which the impact is in the Impacts in Scope section below, the bug bounty hunters are encouraged to submit it for the consideration by the Algorand Inc. team who shall consult the Algorand Foundation team before making final determination. This only applies to Critical and High Blockchain/DLT vulnerabilities.\n\n__Notes:__\n  1. Any bugs that can only be exploited on BetaNet will be rewarded at 33% of the MainNet bounty amount.\n  2. Only MainNet, TestNet, and BetaNet are in scope. Any other publicly provided or private networks are out of scope\n  3. All current and former employees, consultants, advisors, or affiliates of the Algorand Foundation team or the Algorand Inc. team or their affiliates shall be prohibited from receiving any payment or reward of any kind under the Program.",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L1"
        ],
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": [
          "Algorand"
        ],
        "programType": [
          "Blockchain/DLT"
        ],
        "language": [
          "Clarity"
        ]
      },
      "legacy": {
        "technologies": [
          "Blockchain/DLT"
        ],
        "blockchain_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000 to USD $2,000,000"
          },
          {
            "level": "High",
            "payout": "USD $75,000"
          },
          {
            "level": "Medium",
            "payout": "USD $10,000"
          },
          {
            "level": "Low",
            "payout": "USD $2,000"
          }
        ],
        "smartcontract_rewards": [],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Algorand is the world\\u2019s most powerful and sustainable blockchain.\\nOur institutional grade blockchain infrastructure is the first and only to achieve decentralization, scalability, and security without compromises and while being environmentally sustainable.\"), mdx(\"p\", null, \"For more information about the Algorand Blockchain, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.algorand.com/\"\n  }, \"https://www.algorand.com/\"), \".\\nFor more information about the Algorand Foundation Bug Matching Bounty Program, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/algorand-matching/\"\n  }, \"https://immunefi.com/algorand-matching/\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Algorand is the world’s most powerful and sustainable blockchain.\nOur institutional grade blockchain infrastructure is the first and only to achieve decentralization, scalability, and security without compromises and while being environmentally sustainable.</p><p>For more information about the Algorand Blockchain, please visit <a href=\"https://www.algorand.com/\">https://www.algorand.com/</a>.\nFor more information about the Algorand Foundation Bug Matching Bounty Program, please visit <a href=\"https://immunefi.com/algorand-matching/\">https://immunefi.com/algorand-matching/</a></p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the \\u201CImpacts in Scope\\u201D section below. This is a simplified 4-level scale focusing on the impact of the vulnerability reported. This program only covers the Algorand Blockchain itself - any third-party software or smart contracts built on the Algorand Blockchain are considered out of scope.\"), mdx(\"p\", null, \"All Critical and High Blockchain/Digital Ledger Technology vulnerability reports require a Proof of Concept (\\u2018PoC\\u2019) to be eligible for a reward.  Explanations and statements are not accepted as PoC and code is required.\"), mdx(\"p\", null, \"Critical Blockchain/DLT vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the final decision of Immunefi, after consulting with the Algorand Inc. and the Algorand Foundation teams. However, there is a minimum reward of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USD 100 000\"), \".\\nThe following vulnerabilities are not eligible for a reward:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any issue on the issue tracker: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/algorand/go-algorand/issues\"\n  }, \"https://github.com/algorand/go-algorand/issues\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any issue found on open pull requests: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/algorand/go-algorand/pulls\"\n  }, \"https://github.com/algorand/go-algorand/pulls\"), \" \")), mdx(\"p\", null, \"Please refer to the documentations here on creating a dev environment so that PoCs can be created properly.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.algorand.org/docs/\"\n  }, \"https://developer.algorand.org/docs/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.algorand.org/docs/run-a-node/setup/install/\"\n  }, \"https://developer.algorand.org/docs/run-a-node/setup/install/\"))), mdx(\"p\", null, \"KYC shall be done for bug bounty hunters submitting a vulnerability report and requesting a reward for Critical and High Blockchain/DLT vulnerabilities. The basic information needed is full name, residential address, and passport details (DOB, issuing country and passport number). Based on the basic information submitted, the Algorand Foundation team may request further information at its sole discretion for compliance with applicable laws.\"), mdx(\"p\", null, \"Additionally, all levels of bug bounty hunters submitting a vulnerability report and requesting a reward need to submit certification that (i) they are not acting, directly or indirectly, for or on behalf of any person, group entity, or nation named by any Executive Order or the United States Treasury Department as a terrorist, \\u201CSpecially Designated National and Blocked Person,\\u201D or other banned or blocked person, entity, nation, or transaction pursuant to any law, order, rule or regulation that is enforced or administered by the Office of Foreign Assets Control; and (ii) they are not engaging in, instigating or facilitating this transaction, directly or indirectly, on behalf of any such person, group, entity, or nation. They also need to submit an attestation that all information provided is true, correct, up-to-date and not misleading.\"), mdx(\"p\", null, \"The collection of this information will be done by the Algorand Foundation team.\"), mdx(\"p\", null, \"Bug bounty reward payouts are handled by the Algorand Foundation team directly and are denominated in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDCa\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the “Impacts in Scope” section below. This is a simplified 4-level scale focusing on the impact of the vulnerability reported. This program only covers the Algorand Blockchain itself - any third-party software or smart contracts built on the Algorand Blockchain are considered out of scope.</p><p>All Critical and High Blockchain/Digital Ledger Technology vulnerability reports require a Proof of Concept (‘PoC’) to be eligible for a reward.  Explanations and statements are not accepted as PoC and code is required.</p><p>Critical Blockchain/DLT vulnerabilities are capped at 10% of economic damage, primarily taking into consideration funds at risk, but also PR and branding aspects, at the final decision of Immunefi, after consulting with the Algorand Inc. and the Algorand Foundation teams. However, there is a minimum reward of <strong>USD 100 000</strong>.\nThe following vulnerabilities are not eligible for a reward:</p><ul><li>Any issue on the issue tracker: <a href=\"https://github.com/algorand/go-algorand/issues\">https://github.com/algorand/go-algorand/issues</a></li><li>Any issue found on open pull requests: <a href=\"https://github.com/algorand/go-algorand/pulls\">https://github.com/algorand/go-algorand/pulls</a> </li></ul><p>Please refer to the documentations here on creating a dev environment so that PoCs can be created properly.</p><ul><li><a href=\"https://developer.algorand.org/docs/\">https://developer.algorand.org/docs/</a></li><li><a href=\"https://developer.algorand.org/docs/run-a-node/setup/install/\">https://developer.algorand.org/docs/run-a-node/setup/install/</a></li></ul><p>KYC shall be done for bug bounty hunters submitting a vulnerability report and requesting a reward for Critical and High Blockchain/DLT vulnerabilities. The basic information needed is full name, residential address, and passport details (DOB, issuing country and passport number). Based on the basic information submitted, the Algorand Foundation team may request further information at its sole discretion for compliance with applicable laws.</p><p>Additionally, all levels of bug bounty hunters submitting a vulnerability report and requesting a reward need to submit certification that (i) they are not acting, directly or indirectly, for or on behalf of any person, group entity, or nation named by any Executive Order or the United States Treasury Department as a terrorist, “Specially Designated National and Blocked Person,” or other banned or blocked person, entity, nation, or transaction pursuant to any law, order, rule or regulation that is enforced or administered by the Office of Foreign Assets Control; and (ii) they are not engaging in, instigating or facilitating this transaction, directly or indirectly, on behalf of any such person, group, entity, or nation. They also need to submit an attestation that all information provided is true, correct, up-to-date and not misleading.</p><p>The collection of this information will be done by the Algorand Foundation team.</p><p>Bug bounty reward payouts are handled by the Algorand Foundation team directly and are denominated in <strong>USDCa</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring >20% of online stake held by accounts or nodes (those that hold more online stake than Algorand\\u2019s consensus assumptions) to exhibit \\u201Cbad behavior\\u201D (e.g. expiring participation keys)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3rd party risks (e.g applications built on top of the Algorand blockchain, light clients, bridges, liquidity imported to / exported from Algorand, use of 3rd party provider, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any bugs that cannot be exploited on MainNet, TestNet, or BetaNet (e.g. limited to other publicly provided or private networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring quantum computers or impractical memory/computation capabilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard asset freeze / clawback actions from privileged addresses (e.g. manager / reserve / freeze / clawback address actions)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any minor violation of semantics of transfer/creation/\\u2026 of ASAs or of smart contracts that does not have any impact on significant dApps (e.g., because the semantics are just unclear or never actually used in real use cases)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring physical access to the nodes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring a network partition of the Internet itself or significant control over the Internet infrastructure (BGP attack, control of major Internet routers/backbone, control of a cloud provider, generation of TLS certificates for malicious websites, etc.) \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks related to misconfigured nodes or nodes not using the proper configuration (algod running as a privileged user, disabling of DNSSec, use of a too small/too slow disk, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks related to nodes not running the latest stable version of algod\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks using maliciously generated fast catchup hash values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supply-chain attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Side-channel attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Denial of Service (DoS) or crash testing against any node you don\\u2019t own (e.g. public relay nodes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bandwidth flooding DDoS attacks (saturating the network)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that rely on social engineering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys / credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theoretical attacks that cannot be applied in practice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks against white papers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any bug that has been previously disclosed / submitted\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any bug that has already been exploited\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bugs from misconfigured / inappropriately secured smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any third-party software or smart contracts built on Algorand \")), mdx(\"p\", null, \"The following activities are prohibited by (and shall be deemed as a breach of) this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bug testing on any public network; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks or crash testing against any node you don\\u2019t own (e.g. public relay nodes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Algorand Inc. considers Social Engineering attacks against Algorand Inc. employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Inc. employees will be banned from the Algorand Blockchain Bug Bounty program. Algorand Inc. defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Algorand Foundation considers Social Engineering attacks against Algorand Foundation employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Foundation employees will be banned from the Algorand Blockchain Bug Bounty program. The Algorand Foundation defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Blockchain</strong></p><ul><li>Best practice critiques</li><li>Centralization risks</li><li>Attacks requiring &gt;20% of online stake held by accounts or nodes (those that hold more online stake than Algorand’s consensus assumptions) to exhibit “bad behavior” (e.g. expiring participation keys)</li><li>3rd party risks (e.g applications built on top of the Algorand blockchain, light clients, bridges, liquidity imported to / exported from Algorand, use of 3rd party provider, etc.)</li><li>Any bugs that cannot be exploited on MainNet, TestNet, or BetaNet (e.g. limited to other publicly provided or private networks)</li><li>Attacks requiring quantum computers or impractical memory/computation capabilities</li><li>Standard asset freeze / clawback actions from privileged addresses (e.g. manager / reserve / freeze / clawback address actions)</li><li>Any minor violation of semantics of transfer/creation/… of ASAs or of smart contracts that does not have any impact on significant dApps (e.g., because the semantics are just unclear or never actually used in real use cases)</li><li>Attacks requiring physical access to the nodes</li><li>Attacks requiring a network partition of the Internet itself or significant control over the Internet infrastructure (BGP attack, control of major Internet routers/backbone, control of a cloud provider, generation of TLS certificates for malicious websites, etc.) </li><li>Attacks related to misconfigured nodes or nodes not using the proper configuration (algod running as a privileged user, disabling of DNSSec, use of a too small/too slow disk, etc.)</li><li>Attacks related to nodes not running the latest stable version of algod</li><li>Attacks using maliciously generated fast catchup hash values</li><li>Supply-chain attacks</li><li>Side-channel attacks</li><li>Denial of Service (DoS) or crash testing against any node you don’t own (e.g. public relay nodes)</li><li>Bandwidth flooding DDoS attacks (saturating the network)</li><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks that rely on social engineering</li><li>Attacks requiring access to leaked keys / credentials</li><li>Theoretical attacks that cannot be applied in practice</li><li>Attacks against white papers</li><li>Any bug that has been previously disclosed / submitted</li><li>Any bug that has already been exploited</li><li>Bugs from misconfigured / inappropriately secured smart contracts</li><li>Any third-party software or smart contracts built on Algorand </li></ul><p>The following activities are prohibited by (and shall be deemed as a breach of) this bug bounty program:</p><ul><li>Bug testing on any public network; all testing should be done on private testnets</li><li>Any denial of service attacks or crash testing against any node you don’t own (e.g. public relay nodes)</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li><li>Algorand Inc. considers Social Engineering attacks against Algorand Inc. employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Inc. employees will be banned from the Algorand Blockchain Bug Bounty program. Algorand Inc. defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.</li><li>Algorand Foundation considers Social Engineering attacks against Algorand Foundation employees a violation of Program Terms and Conditions. Researchers engaging in Social Engineering attacks against Algorand Foundation employees will be banned from the Algorand Blockchain Bug Bounty program. The Algorand Foundation defines Social Engineering as acts that influence people to perform security-impacting actions or divulge confidential information.</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"All blockchain code of Algorand can be found at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/algorand/go-algorand\"\n  }, \"https://github.com/algorand/go-algorand\"), \". However, only those in the Assets in Scope table\\u2019s located in the main branch are considered as in-scope of the bug bounty program.\"), mdx(\"p\", null, \"Note: any file which includes _test and/or mocks is out of scope.\\nIn particular, the following assets are out of scope\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"kmd\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Ledger app\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Indexer\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"SDKs\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Any third-party software or smart contracts\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Websites (algorand.com, algorand.foundation, etc.)\")), mdx(\"p\", null, \"If an impact can be caused to any other asset relating to the Algorand Blockchain that isn\\u2019t on this table but for which the impact is in the Impacts in Scope section below, the bug bounty hunters are encouraged to submit it for the consideration by the Algorand Inc. team who shall consult the Algorand Foundation team before making final determination. This only applies to Critical and High Blockchain/DLT vulnerabilities.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes:\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Any bugs that can only be exploited on BetaNet will be rewarded at 33% of the MainNet bounty amount.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Only MainNet, TestNet, and BetaNet are in scope. Any other publicly provided or private networks are out of scope\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"All current and former employees, consultants, advisors, or affiliates of the Algorand Foundation team or the Algorand Inc. team or their affiliates shall be prohibited from receiving any payment or reward of any kind under the Program.\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>All blockchain code of Algorand can be found at <a href=\"https://github.com/algorand/go-algorand\">https://github.com/algorand/go-algorand</a>. However, only those in the Assets in Scope table’s located in the main branch are considered as in-scope of the bug bounty program.</p><p>Note: any file which includes _test and/or mocks is out of scope.\nIn particular, the following assets are out of scope</p><ol><li>kmd</li><li>Ledger app</li><li>Indexer</li><li>SDKs</li><li>Any third-party software or smart contracts</li><li>Websites (algorand.com, algorand.foundation, etc.)</li></ol><p>If an impact can be caused to any other asset relating to the Algorand Blockchain that isn’t on this table but for which the impact is in the Impacts in Scope section below, the bug bounty hunters are encouraged to submit it for the consideration by the Algorand Inc. team who shall consult the Algorand Foundation team before making final determination. This only applies to Critical and High Blockchain/DLT vulnerabilities.</p><p><strong>Notes:</strong></p><ol><li>Any bugs that can only be exploited on BetaNet will be rewarded at 33% of the MainNet bounty amount.</li><li>Only MainNet, TestNet, and BetaNet are in scope. Any other publicly provided or private networks are out of scope</li><li>All current and former employees, consultants, advisors, or affiliates of the Algorand Foundation team or the Algorand Inc. team or their affiliates shall be prohibited from receiving any payment or reward of any kind under the Program.</li></ol>",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
