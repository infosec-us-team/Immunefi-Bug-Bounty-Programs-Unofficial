{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "ease",
      "slug": "ease",
      "project": "Ease",
      "maxBounty": 100000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/5oA0xXlefkuVYgpmlioixf/d78a024ba2a1f44bc11d6c6a0e085bb1/Ease_logo.jpeg",
      "launchDate": "2022-04-07T15:00-06:00",
      "updatedDate": "2022-10-13T13:59:30.748Z",
      "kyc": false,
      "rewards": [
        {
          "assetType": "smart_contract",
          "level": "critical",
          "payout": "USD $100,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "high",
          "payout": "USD $15,000",
          "pocRequired": true
        },
        {
          "assetType": "smart_contract",
          "level": "medium",
          "payout": "USD $5,000",
          "pocRequired": false
        },
        {
          "assetType": "smart_contract",
          "level": "low",
          "payout": "USD $1,000",
          "pocRequired": false
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "6O4AKtRKqsb8CAvj9l34UH",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/BribePot.sol",
          "description": "BribePot"
        },
        {
          "id": "1uLnahNfBkFSsAPtm3CoY9",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/Delegable.sol",
          "description": "Delegable"
        },
        {
          "id": "5Q2balsB03oQ0YoO5hBB7g",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/EaseToken.sol",
          "description": "EaseToken"
        },
        {
          "id": "6cMAFr7hNTqX7dNrWYwSyQ",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/GvToken.sol",
          "description": "GvToken"
        },
        {
          "id": "4RPJsIpDHlEaMTk9aGahz9",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/TokenSwap.sol",
          "description": "TokenSwap"
        },
        {
          "id": "sECwcXgWHg67MPL7SuAbx",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/governance/GovernorBravoDelegate.sol",
          "description": "GovernorBravoDelegate"
        },
        {
          "id": "22d8BDagrO8jCRw5paW82e",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/governance/GovernorBravoDelegator.sol",
          "description": "GovernorBravoDelegator"
        },
        {
          "id": "2FkCKQOa2GvYz5gE2hoNaw",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/adapters/RcaShieldAave.sol",
          "description": "RcaShieldAave"
        },
        {
          "id": "7MKqTM8Gxxzb3RNRMpg8W0",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/adapters/RcaShieldCompound.sol",
          "description": "RcaShieldCompound"
        },
        {
          "id": "HCYwi2dcwHrhJTSEaHiu6",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/adapters/RcaShieldConvex.sol",
          "description": "RcaShieldConvex"
        },
        {
          "id": "3FM2AsXd3n1nTBcyo3peo8",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/adapters/RcaShieldOnsen.sol",
          "description": "RcaShieldOnsen"
        },
        {
          "id": "5kEpKvtKZYvbWAABUHx8Xk",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/RcaController.sol",
          "description": "RcaController"
        },
        {
          "id": "5uWUcZAf5SMcQ2HZihWPSq",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/RcaShield.sol",
          "description": "RcaShield"
        },
        {
          "id": "I3BGri8XbUhfIeUkBZvtU",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/RcaShieldBase.sol",
          "description": "RcaShieldBase"
        },
        {
          "id": "79yIlRF5NdAUJQQ2jTRxhS",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/RcaShieldNormalized.sol",
          "description": "RcaShieldNormalized"
        },
        {
          "id": "37S9BgiZUIcUJbIa3nPYQK",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/core/RcaTreasury.sol",
          "description": "RcaTreasury"
        },
        {
          "id": "5mWn4mAfJEkMncgPsQc9UT",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/external/Aave.sol",
          "description": "Aave"
        },
        {
          "id": "2WpDlUeQlLLOYlP41k9D4i",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/external/Compound.sol",
          "description": "Compound"
        },
        {
          "id": "beQHR44L10y5oVp0cBE48",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/external/Convex.sol",
          "description": "Convex"
        },
        {
          "id": "1SNzlOIE7op7fSbcnNVsa1",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/external/NexusMutual.sol",
          "description": "NexusMutual"
        },
        {
          "id": "3w78QgSl2VycgwSffnCbZg",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/external/Sushiswap.sol",
          "description": "Sushiswap"
        },
        {
          "id": "2Gr71XLQOq759Kc8tJYyUA",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/general/Governable.sol",
          "description": "Governable"
        },
        {
          "id": "4A8j4o7wOcz1hxF7j7zHac",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/general/RcaGovernable.sol",
          "description": "RcaGovernable"
        },
        {
          "id": "2zhy2X2cDMM9lVAKLMSo6m",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/interfaces/IRcaController.sol",
          "description": "RcaController"
        },
        {
          "id": "Oz0KWmQGv8ZnfHPcL07DT",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/interfaces/IRcaShield.sol",
          "description": "RcaShield"
        },
        {
          "id": "7wb3Kwo8FKwffel1SwwOxE",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/interfaces/IRouter.sol",
          "description": "IRouter"
        },
        {
          "id": "7p3zgfUpwv21Hx7J6M6IXF",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/ease-rca/blob/master/contracts/library/MerkleProof.sol",
          "description": "MerkleProof"
        },
        {
          "id": "5IRfATuPnZkQ7aFpKPxCJA",
          "type": "smart_contract",
          "url": "https://github.com/EaseDeFi/gvToken/blob/main/contracts/core/governance/GovernorBravoInterfaces.sol",
          "description": "GovernorBravoInterfaces"
        }
      ],
      "impacts": [
        {
          "id": "N5HxBTPFpfRHUy5IVnimc",
          "title": "Theft or irredeemable freezing of user funds of more than 50% of the assets in any vault.",
          "type": "smart_contract",
          "severity": "critical"
        },
        {
          "id": "3qMA5LJ6IH1BJEfOjybhLQ",
          "title": "Theft of funds or unsold yield of more than 1%, but less than 50% assets in any vault",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "6bAJ9bcFuwYFbm02EXMfy4",
          "title": "Permanent freezing of unsold yield",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "1VOWF5pDkAqzMl7q9aqomT",
          "title": "Adapter for a protocol being broken to the point where it will not receive rewards that should be given",
          "type": "smart_contract",
          "severity": "high"
        },
        {
          "id": "7CfRwJzxvxr06KOM1zJcvv",
          "title": "Theft or freezing of funds of less than 1% assets, but greater than a negligible amount",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "20H3vqtO1xk0FYMjL1TMK1",
          "title": "Non-privileged griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "13FN2kkSg9XfWi5ZEV1zch",
          "title": "Adapters lacking the ability to get full normal rewards that the protocol returns (i.e. if the protocol gives 2 rewards tokens but the vault can only withdraw 1)",
          "type": "smart_contract",
          "severity": "medium"
        },
        {
          "id": "fVwU3hx0tKs0tiILh2EYM",
          "title": "Smart contract fails to deliver promised returns, but doesnâ€™t lose more than a negligible amount of funds",
          "type": "smart_contract",
          "severity": "low"
        }
      ],
      "programOverview": "Ease wants to make DeFi as easy and safe as possible. We aim to cover every dollar in DeFi so that users can finally feel at ease. The core members of the ease team have been around for a long time. Some of us already worked with David Chaum on DigiCash/eCash many eons ago. Others made the first NFT derivatives. All of us have been interested in blockchain technology and its societal impact for many years.\n\nFor more information about Ease, please visit [https://ease.org/](https://ease.org/).",
      "prioritizedVulnerabilities": "__Impacts in Scope__\n\nOnly the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\n\n__Smart Contracts__\n\nCritical\n\n  - Theft or irredeemable freezing of user funds of more than 50% of the assets in any vault.\n\nHigh\n\n  - Theft of funds or unsold yield of more than 1%, but less than 50% assets in any vault.\n  - Permanent freezing of unsold yield.\n  - Adapter for a protocol being broken to the point where it will not receive rewards that should be given.\n\nMedium\n\n  - Theft or freezing of funds of less than 1% assets, but greater than a negligible amount.\n  - Non-privileged griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol).\n  - Adapters lacking the ability to get full normal rewards that the protocol returns (i.e. if the protocol gives 2 rewards tokens but the vault can only withdraw 1).\n\nLow\n  - Smart contract fails to deliver promised returns, but doesnâ€™t lose more than a negligible amount of funds.\n\n__Particularly Vulnerable Areas:__\n\n  - Decimal problems. Weâ€™re starting with Compound and a few USDC contracts that require normalization so we must prevent any problems as this would likely lead to a critical.\n  - Protocol composability problems. Each shield adapter functions differently and there could be high or critical severity problems here.\n  - Conversion rates. On mint/redeem if our calculations are off this could easily lead to criticals.\n  - Merkle trees for pricing or liquidation amounts being able to be manipulated in some way.\n\nIn case of discrepancy between [Immunefi Vulnerability Severity Classification System V2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-1/) and Easeâ€™s classification above, Easeâ€™s classification will be followed.",
      "rewardsBody": "Rewards are distributed according to the impact of the vulnerability based on the [Immunefi Vulnerability Severity Classification System V2.2](https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2). This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\n\nAll High and Critical Smart Contract bug reports require a PoC to be eligible for a reward. Explanations and statements are not accepted as PoC and code is required.\n\nThe following vulnerabilities are not eligible for a reward:\n\n  - All vulnerabilities marked in the [security reviews](https://github.com/EaseDeFi/Audits) are not eligible for a reward\n  - Reports about losses from governance attacks/off-chain exploits\n  - Griefing regarding capacity or capacity going over the limit\n\nPayouts are handled by the __Ease__ team directly and are denominated in USD. However, payouts are done in __USDC__.",
      "outOfScopeAndRules": "The following vulnerabilities are excluded from the rewards for this bug bounty program:\n\n  - Attacks that the reporter has already exploited themselves, leading to damage\n  - Attacks requiring access to leaked keys/credentials\n  - Attacks requiring access to privileged addresses (governance, strategist)\n\n__Smart Contracts and Blockchain__\n  - Incorrect data supplied by third party oracles\n    - Not to exclude oracle manipulation/flash loan attacks\n  - Basic economic governance attacks (e.g. 51% attack)\n  - Lack of liquidity\n  - Best practice critiques\n  - Sybil attacks\n  - Centralization risks\n  - Arbitrage tricks (not complete attacks but ways for arbitrageurs to get extra funds, such as depositing funds into a shield then buying rewards themselves)\n\nThe following activities are prohibited by this bug bounty program:\n\n  - Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\n  - Any testing with pricing oracles or third party smart contracts\n  - Attempting phishing or other social engineering attacks against our employees and/or customers\n  - Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n  - Any denial of service attacks\n  - Automated testing of services that generates significant amounts of traffic\n  - Public disclosure of an unpatched vulnerability in an embargoed bounty",
      "assetsBodyV2": null,
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "Insurance Aggregator"
        ],
        "projectType": [
          "Defi"
        ],
        "ecosystem": [
          "ETH"
        ],
        "programType": [
          "Smart Contract"
        ],
        "language": [
          "Solidity"
        ]
      },
      "legacy": {
        "technologies": [
          "Smart Contract"
        ],
        "blockchain_rewards": [],
        "smartcontract_rewards": [
          {
            "level": "Critical",
            "payout": "USD $100,000"
          },
          {
            "level": "High",
            "payout": "USD $15,000"
          },
          {
            "level": "Medium",
            "payout": "USD $5,000"
          },
          {
            "level": "Low",
            "payout": "USD $1,000"
          }
        ],
        "web_rewards": []
      }
    },
    "mdx": {
      "programOverview": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Ease wants to make DeFi as easy and safe as possible. We aim to cover every dollar in DeFi so that users can finally feel at ease. The core members of the ease team have been around for a long time. Some of us already worked with David Chaum on DigiCash/eCash many eons ago. Others made the first NFT derivatives. All of us have been interested in blockchain technology and its societal impact for many years.\"), mdx(\"p\", null, \"For more information about Ease, please visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ease.org/\"\n  }, \"https://ease.org/\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Ease wants to make DeFi as easy and safe as possible. We aim to cover every dollar in DeFi so that users can finally feel at ease. The core members of the ease team have been around for a long time. Some of us already worked with David Chaum on DigiCash/eCash many eons ago. Others made the first NFT derivatives. All of us have been interested in blockchain technology and its societal impact for many years.</p><p>For more information about Ease, please visit <a href=\"https://ease.org/\">https://ease.org/</a>.</p>",
        "scope": {}
      },
      "prioritizedVulnerabilities": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Impacts in Scope\")), mdx(\"p\", null, \"Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts\")), mdx(\"p\", null, \"Critical\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft or irredeemable freezing of user funds of more than 50% of the assets in any vault.\")), mdx(\"p\", null, \"High\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft of funds or unsold yield of more than 1%, but less than 50% assets in any vault.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Permanent freezing of unsold yield.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adapter for a protocol being broken to the point where it will not receive rewards that should be given.\")), mdx(\"p\", null, \"Medium\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theft or freezing of funds of less than 1% assets, but greater than a negligible amount.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Non-privileged griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adapters lacking the ability to get full normal rewards that the protocol returns (i.e. if the protocol gives 2 rewards tokens but the vault can only withdraw 1).\")), mdx(\"p\", null, \"Low\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Smart contract fails to deliver promised returns, but doesn\\u2019t lose more than a negligible amount of funds.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Particularly Vulnerable Areas:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Decimal problems. We\\u2019re starting with Compound and a few USDC contracts that require normalization so we must prevent any problems as this would likely lead to a critical.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol composability problems. Each shield adapter functions differently and there could be high or critical severity problems here.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conversion rates. On mint/redeem if our calculations are off this could easily lead to criticals.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Merkle trees for pricing or liquidation amounts being able to be manipulated in some way.\")), mdx(\"p\", null, \"In case of discrepancy between \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-1/\"\n  }, \"Immunefi Vulnerability Severity Classification System V2\"), \" and Ease\\u2019s classification above, Ease\\u2019s classification will be followed.\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p><strong>Impacts in Scope</strong></p><p>Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.</p><p><strong>Smart Contracts</strong></p><p>Critical</p><ul><li>Theft or irredeemable freezing of user funds of more than 50% of the assets in any vault.</li></ul><p>High</p><ul><li>Theft of funds or unsold yield of more than 1%, but less than 50% assets in any vault.</li><li>Permanent freezing of unsold yield.</li><li>Adapter for a protocol being broken to the point where it will not receive rewards that should be given.</li></ul><p>Medium</p><ul><li>Theft or freezing of funds of less than 1% assets, but greater than a negligible amount.</li><li>Non-privileged griefing (e.g. no profit motive for an attacker, but damage to the users or the protocol).</li><li>Adapters lacking the ability to get full normal rewards that the protocol returns (i.e. if the protocol gives 2 rewards tokens but the vault can only withdraw 1).</li></ul><p>Low</p><ul><li>Smart contract fails to deliver promised returns, but doesnâ€™t lose more than a negligible amount of funds.</li></ul><p><strong>Particularly Vulnerable Areas:</strong></p><ul><li>Decimal problems. Weâ€™re starting with Compound and a few USDC contracts that require normalization so we must prevent any problems as this would likely lead to a critical.</li><li>Protocol composability problems. Each shield adapter functions differently and there could be high or critical severity problems here.</li><li>Conversion rates. On mint/redeem if our calculations are off this could easily lead to criticals.</li><li>Merkle trees for pricing or liquidation amounts being able to be manipulated in some way.</li></ul><p>In case of discrepancy between <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-1/\">Immunefi Vulnerability Severity Classification System V2</a> and Easeâ€™s classification above, Easeâ€™s classification will be followed.</p>",
        "scope": {}
      },
      "rewardsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Rewards are distributed according to the impact of the vulnerability based on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\"\n  }, \"Immunefi Vulnerability Severity Classification System V2.2\"), \". This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.\"), mdx(\"p\", null, \"All High and Critical Smart Contract bug reports require a PoC to be eligible for a reward. Explanations and statements are not accepted as PoC and code is required.\"), mdx(\"p\", null, \"The following vulnerabilities are not eligible for a reward:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All vulnerabilities marked in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/EaseDeFi/Audits\"\n  }, \"security reviews\"), \" are not eligible for a reward\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reports about losses from governance attacks/off-chain exploits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Griefing regarding capacity or capacity going over the limit\")), mdx(\"p\", null, \"Payouts are handled by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Ease\"), \" team directly and are denominated in USD. However, payouts are done in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"USDC\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>Rewards are distributed according to the impact of the vulnerability based on the <a href=\"https://immunefi.com/immunefi-vulnerability-severity-classification-system-v2-2\">Immunefi Vulnerability Severity Classification System V2.2</a>. This is a simplified 5-level scale, with separate scales for websites/apps, smart contracts, and blockchains/DLTs, focusing on the impact of the vulnerability reported.</p><p>All High and Critical Smart Contract bug reports require a PoC to be eligible for a reward. Explanations and statements are not accepted as PoC and code is required.</p><p>The following vulnerabilities are not eligible for a reward:</p><ul><li>All vulnerabilities marked in the <a href=\"https://github.com/EaseDeFi/Audits\">security reviews</a> are not eligible for a reward</li><li>Reports about losses from governance attacks/off-chain exploits</li><li>Griefing regarding capacity or capacity going over the limit</li></ul><p>Payouts are handled by the <strong>Ease</strong> team directly and are denominated in USD. However, payouts are done in <strong>USDC</strong>.</p>",
        "scope": {}
      },
      "outOfScopeAndRules": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The following vulnerabilities are excluded from the rewards for this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks that the reporter has already exploited themselves, leading to damage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to leaked keys/credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attacks requiring access to privileged addresses (governance, strategist)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Smart Contracts and Blockchain\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Incorrect data supplied by third party oracles\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not to exclude oracle manipulation/flash loan attacks\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic economic governance attacks (e.g. 51% attack)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of liquidity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Best practice critiques\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sybil attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Centralization risks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arbitrage tricks (not complete attacks but ways for arbitrageurs to get extra funds, such as depositing funds into a shield then buying rewards themselves)\")), mdx(\"p\", null, \"The following activities are prohibited by this bug bounty program:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with mainnet or public testnet contracts; all testing should be done on private testnets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with pricing oracles or third party smart contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting phishing or other social engineering attacks against our employees and/or customers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any denial of service attacks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated testing of services that generates significant amounts of traffic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public disclosure of an unpatched vulnerability in an embargoed bounty\")));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "<p>The following vulnerabilities are excluded from the rewards for this bug bounty program:</p><ul><li>Attacks that the reporter has already exploited themselves, leading to damage</li><li>Attacks requiring access to leaked keys/credentials</li><li>Attacks requiring access to privileged addresses (governance, strategist)</li></ul><p><strong>Smart Contracts and Blockchain</strong></p><ul><li>Incorrect data supplied by third party oracles<ul><li>Not to exclude oracle manipulation/flash loan attacks</li></ul></li><li>Basic economic governance attacks (e.g. 51% attack)</li><li>Lack of liquidity</li><li>Best practice critiques</li><li>Sybil attacks</li><li>Centralization risks</li><li>Arbitrage tricks (not complete attacks but ways for arbitrageurs to get extra funds, such as depositing funds into a shield then buying rewards themselves)</li></ul><p>The following activities are prohibited by this bug bounty program:</p><ul><li>Any testing with mainnet or public testnet contracts; all testing should be done on private testnets</li><li>Any testing with pricing oracles or third party smart contracts</li><li>Attempting phishing or other social engineering attacks against our employees and/or customers</li><li>Any testing with third party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)</li><li>Any denial of service attacks</li><li>Automated testing of services that generates significant amounts of traffic</li><li>Public disclosure of an unpatched vulnerability in an embargoed bounty</li></ul>",
        "scope": {}
      },
      "assetsBodyV2": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      },
      "impactsBody": {
        "compiledSource": "\"use strict\";\n\nvar _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;",
        "renderedOutput": "",
        "scope": {}
      }
    },
    "project": null
  },
  "__N_SSG": true
}
