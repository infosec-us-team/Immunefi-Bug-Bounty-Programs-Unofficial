{
  "pageProps": {
    "type": "bounty",
    "bounty": {
      "id": "swisstronik",
      "slug": "swisstronik",
      "project": "Swisstronik",
      "maxBounty": 2000,
      "logo": "https://images.ctfassets.net/t3wqy70tc3bv/5Qb9wYAITyuHjUw2WJxbfa/6f01050bb1b91cebd9fcab15e5a3adde/LbAxXi_V_400x400.jpg",
      "launchDate": "2023-09-07T13:00+03:00",
      "endDate": null,
      "updatedDate": "2023-09-28T18:53:12.446Z",
      "kyc": true,
      "rewards": [
        {
          "assetType": "blockchain_dlt",
          "level": "critical",
          "payout": "USD $2,000",
          "pocRequired": true
        },
        {
          "assetType": "blockchain_dlt",
          "level": "high",
          "payout": "USD $1,000",
          "pocRequired": true
        }
      ],
      "audits": null,
      "assets": [
        {
          "id": "DLnXYABCikeLsQwZ5pB5W",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-chain",
          "description": "Code repository - Swisstronik chain",
          "isPrimacyOfImpact": null
        },
        {
          "id": "6zqhia5A0a4thjCUaCB9UU",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-librustgo/tree/master/sgx-evm/src/backend.rs",
          "description": "Code repository - Intel SGX",
          "isPrimacyOfImpact": null
        },
        {
          "id": "48ABhzBK3js3wVg9kJ8O3A",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-librustgo/tree/master/sgx-evm/src/key_manager.rs",
          "description": "Code repository - Intel SGX",
          "isPrimacyOfImpact": null
        },
        {
          "id": "5zKsCp1Yf1Xi2sCyxkSVLk",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-librustgo/tree/master/sgx-evm/src/encryption.rs",
          "description": "Code repository - Intel SGX",
          "isPrimacyOfImpact": null
        },
        {
          "id": "469wQqUBcPLGdIpvenTtX5",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-librustgo/tree/master/sgx-evm/src/attestation",
          "description": "Code repository - Intel SGX",
          "isPrimacyOfImpact": null
        },
        {
          "id": "1lpNYtU1D6BUTPXRSoznl3",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-librustgo/tree/master/sgx-evm/src/memory.rs",
          "description": "Code repository - Intel SGX",
          "isPrimacyOfImpact": null
        },
        {
          "id": "4DFZT7cpMb3t6M4Qj11KJB",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-evm-module/blob/master/x/evm/keeper/sgxvm.go",
          "description": "Code repository - EVM module",
          "isPrimacyOfImpact": null
        },
        {
          "id": "2mGew0rrIZvNkdSHenMq64",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-evm-module/tree/master/app/ante",
          "description": "Code repository - EVM module",
          "isPrimacyOfImpact": null
        },
        {
          "id": "kFyjp0Trf9s7ZaGq5JCnk",
          "type": "blockchain_dlt",
          "url": "https://github.com/SigmaGmbH/swisstronik-evm-module/tree/master/x/evm",
          "description": "Code repository - EVM module",
          "isPrimacyOfImpact": null
        }
      ],
      "impacts": [
        {
          "id": "5kj0pywiJhZs9K41z7n3Fc",
          "title": "Network not being able to confirm new transactions (Total network shutdown)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "53FiOVlQtb21SmF2VuRYg1",
          "title": "Unintended permanent chain split requiring hard fork (Network partition requiring hard fork)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "2gUAUaYJbIFY9rS32hs3mZ",
          "title": "Direct loss of funds",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "blDQOwNL2JQK8xF7vRkG5",
          "title": "Permanent freezing of funds (fix requires hard fork)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "3pA4046OdqT4CnZPy2p6Rh",
          "title": "SGX vulnerabilities that enabled unauthorized extraction of sensitive data - e.g. raw tx.data, raw smart contract state - from SGX enclave (without modifying the enclave itself)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "1OqWA45fbWBu8ytzxfAY7G",
          "title": "Any issues that could potentially cause non-deterministic behavior, leading to varying results among nodes.",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "fGz6TvwynFYogTyaykeQm",
          "title": "Bugs that enable getting around checks on transactions - e.g. using endless gas, using more gas than paid for, or evading signature verification. (without DDoS or brute force)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "6WNeVEYSt1kFKMSzWedQDN",
          "title": "Transactions or RPC calls which crash node or stops blocks production (without DDoS or brute force)",
          "type": "blockchain_dlt",
          "severity": "critical"
        },
        {
          "id": "4r0pw3yFml8UWePpQvLOxJ",
          "title": "Temporary freezing of network transactions by delaying one block by 500% or more of the average block time of the preceding 24 hours beyond standard difficulty adjustments",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "5VZ6zOyPrpEYQwVXluOIYL",
          "title": "A bug in the respective layer 1 network code that results in unintended smart contract behavior with no concrete funds at direct risk",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "qKIJM4nZsumku1I1JLm1F",
          "title": "Send incorrect transactions that can be included in the mempool",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "4JrjJCwfbPhSzKuBIHOx4A",
          "title": "Bugs which causes network slowdown more than 30% (without DDoS or brute force)",
          "type": "blockchain_dlt",
          "severity": "high"
        },
        {
          "id": "I8ZFaOhbnWAhMRm6G3vOE",
          "title": "Bugs which cause extreme resource usage e.g RAM / CPU / storage . (without DDoS or brute force)",
          "type": "blockchain_dlt",
          "severity": "high"
        }
      ],
      "programOverview": "Swisstronik is an identity-based layer-1 solution designed to build scalable, regulatory compliant dApps that would also ensure users' data protection and privacy.\n\nSwisstronik is an EVM chain built on Cosmos SDK with on-chain KYC, AML & DPR solutions, and enhanced data privacy thanks to Intel SGX and ZK-SNARKs. With it, anyone can easily launch a compliant dApp - or easily adapt an existing dApp on another chain to new regulations. As a result, there will be a perfect balance between user privacy, regulatory compliance, and decentralization.\n\nProgram is set to end on November 15, 2023\n\nFor more information about Swisstronik, please visit [https://swisstronik.com/  ](https://swisstronik.com/)\n\nSwisstronik is launching its first Testnet, which includes the blockchain with the Intel SGX integration, but excludes the second data security level (ZK-SNARKs) and the Identity module. Testnet 2.0 with more functionalities is planned for Q4 2023. Official audit is also slated for latter.\n\nSwisstronik provides rewards in USDT(TRC20). For more details about the payment process, please view the Rewards by Threat Level section further below.\n\n__KYC Requirement__\n\nThe provision of KYC is required to receive a reward for this bug bounty program where the following information will be required to be provided:\n\n- Email verification, photo/selfie, ID/Passport, country of residence & nationality\n\nKYC information is only required on confirmation of the validity of a bug report.   \n\n__Responsible Publication__\n\nSwisstronik adheres to category 1. This Policy determines what information whitehats are allowed to make public from their submitted bug reports. For more information about the category selected, please refer to our [Responsible Publication ](https://immunefi.com/responsible-publication/)page.\n\n__Primacy of Impact vs Primacy of Rules__\n\nSwisstronik adheres to the Primacy of Rules, which means that the whole bug bounty program is run strictly under the terms stated in this page.\n\n__Known Issue Assurance__\n\nSwisstronik commits to providing Known Issue Assurance to bug submissions through their program. This means that Swisstronik will either disclose known issues publicly or at the very least privately via a self-reported bug submission in order to allow for a more objective and streamlined mediation process to prove that an issue is known. Otherwise, assuming the bug report itself is valid, it would result in the bug report being considered in-scope and due 100% of the reward with respect to the bug bounty program terms. \n\n__Immunefi Standard Badge__\n\nSwisstronik has satisfied the requirements for the [Immunefi Standard Badge](https://immunefisupport.zendesk.com/hc/en-us/articles/6427157117713-The-Immunefi-Standard-Badge-), which is given to projects that adhere to our best practices.\n",
      "prioritizedVulnerabilities": "Only the following impacts are accepted within this bug bounty program. All other impacts are not considered as in-scope, even if they affect something in the assets in scope table.",
      "rewardsBody": "Rewards are distributed according to the impact the vulnerability could otherwise cause based on the Impacts in Scope table further below. \n\n__Repeatable Attack Limitations__\n\nIn cases of repeatable attacks for smart contract bugs, only the first attack will be counted, regardless of whether the smart contract is upgradable, pausable, or killable.\n\n__Restrictions on Security Researcher Eligibility__\n\nSecurity researchers who fall under any of the following are ineligible for a reward.\n- US residents, citizens and/or holders of long-term residence/work permits etc\n- China residents, citizens and/or holders of long-term residence/work permits etc.\n- Individuals that are listed or associated with any person or entity listed on any of the US Department of Commerce’s denied persons or entity list, the US department of treasury’s specially designated nationals or blocked persons lists, the US Department of State’s debarred parties list, the EU Consolidated List of persons, groups and entities subject to EU financial sanctions or the Swiss SECO’s overall list of sanctioned individuals, entities and organizations or nationals as well as residents of, citizens of or located in geographic areas that is subject to UN-, US-, EU or Swiss sanctions or embargoes. \n\n__Feasibility Limitations__\n\nAt Immunefi, we sometimes receive reports that are valid (the bug and attack vector are real) and cite assets and impacts that are in scope, but there may be obstacles or barriers to executing the attack in the real world. In other words, there is a question about how feasible the attack really is. If it’s obviously feasible, then it seems there are no questions about severity or payout amount. But if the bug report is less feasible, or not really feasible at all, suddenly questions arise.\n\nTherefore, Immunefi has developed a set of [feasibility limitation standards](https://immunefisupport.zendesk.com/hc/en-us/articles/16913132495377-Feasibility-Limitation-Standards) which by default states what a Projects should or should not cite when downgrading a bug report’s impact, severity, and/or payout amount. These standards are continuously being developed and updated  with help of the community and encompasses fair guidelines where the project clearly commits, and the security researcher can be assured that the project cannot arbitrarily downgrade the program based on theoretical counter measures, such as a [chain rollback. ](https://immunefisupport.zendesk.com/hc/en-us/articles/16913153448721-Chain-Rollbacks)\n\n__Proof of Concept (PoC) Requirements__\n\nA PoC is required for the following severity levels:\n- Blockchain/DLT: Critical\n- Blockchain/DLT: High\n\nAll PoCs submitted must comply with the Immunefi-wide [PoC Guidelines and Rules.](https://immunefisupport.zendesk.com/hc/en-us/articles/9946217628561-Proof-of-Concept-PoC-Guidelines-and-Rules) Bug report submissions without a PoC when a PoC is required will not be provided with a reward.\n\n__Reward Payment Terms__\n\nPayouts are handled by the Swisstronik team directly and are denominated in USD. However, payments are done in USDT (TRC20).\n",
      "outOfScopeAndRules": "These impacts are out of scope for this bug bounty program. \n\n__All Categories__\n\n- Impacts caused by attacks requiring access to leaked keys/credentials 3rd party issues (e.g., Cosmos SDK, Tendermint, CometBFT)\n- The code that's added only for testing purposes (i.e. example smart contracts)\n- We appreciate the inclusion of logging and additional unit tests in pull requests (PRs), but it's essential to note that issues related to these aspects are not considered as valid \"bugs\" within the scope of this program\n- DNS and other supporting services misconfigurations\n\n__Blockchain/DLT__ \n\n- Impacts requiring novel economic and governance attacks (e.g. 51% attack)\n- Lack of liquidity impacts\n- Impacts from novel Sybil attacks\n- Impacts involving centralization risks\n- Best practice recommendations\n\nThe following activities are prohibited by this bug bounty program:\n\n- Any testing on mainnet or public testnet deployed code; all testing should be done on local-forks of either public testnet or mainnet\n- Any testing with pricing oracles or third-party smart contracts\n- Attempting phishing or other social engineering attacks against our employees and/or customers\n- Any testing with third-party systems and applications (e.g. browser extensions) as well as websites (e.g. SSO providers, advertising networks)\n- Any denial of service attacks that are executed against project assets\n- Automated testing of services that generates significant amounts of traffic\n- Public disclosure of an unpatched vulnerability in an embargoed bounty\n",
      "assetsBodyV2": "All code of Swisstronik can be found at [https://github.com/SigmaGmbH/](https://github.com/SigmaGmbH/)\nAll the scoped code should be using git “master” branch\n\nOther helpful links include:\n- Swisstronik Docs - [https://swisstronik.gitbook.io/swisstronik-docs/](https://swisstronik.gitbook.io/swisstronik-docs/)\n- Swisstronik Faucet - [https://faucet.testnet.swisstronik.com/](https://faucet.testnet.swisstronik.com/)\n- Swisstronik EVM Block Explorer - [https://explorer-evm.testnet.swisstronik.com/](https://explorer-evm.testnet.swisstronik.com/)\n- Swisstronik Cosmos Block Explorer - [https://explorer-cosmos.testnet.swisstronik.com/](https://explorer-cosmos.testnet.swisstronik.com/)\n",
      "impactsBody": null,
      "immunefiStandard": true,
      "tags": {
        "productType": [
          "L1"
        ],
        "projectType": [
          "Blockchain"
        ],
        "ecosystem": null,
        "programType": [
          "Blockchain/DLT"
        ],
        "language": [
          "Rust",
          "Go"
        ]
      },
      "legacy": {
        "technologies": [
          "Blockchain/DLT"
        ],
        "blockchain_rewards": [
          {
            "level": "Critical",
            "payout": "USD $2,000"
          },
          {
            "level": "High",
            "payout": "USD $1,000"
          }
        ],
        "smartcontract_rewards": [],
        "web_rewards": []
      }
    },
    "project": null
  },
  "__N_SSG": true
}
